-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hud_accel_extractExposureFrames_0_8_8_2160_3840_2_3_3_3_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_hdrSrc_cols_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    p_hdrSrc_cols_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    p_hdrSrc_cols_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    p_hdrSrc_cols_empty_n : IN STD_LOGIC;
    p_hdrSrc_cols_read : OUT STD_LOGIC;
    InImg_data156_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    InImg_data156_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    InImg_data156_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    InImg_data156_empty_n : IN STD_LOGIC;
    InImg_data156_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (11 downto 0);
    LEF_Img_data157_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    LEF_Img_data157_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    LEF_Img_data157_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    LEF_Img_data157_full_n : IN STD_LOGIC;
    LEF_Img_data157_write : OUT STD_LOGIC;
    SEF_Img_data158_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    SEF_Img_data158_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    SEF_Img_data158_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    SEF_Img_data158_full_n : IN STD_LOGIC;
    SEF_Img_data158_write : OUT STD_LOGIC;
    LEF_Img_rows_c_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    LEF_Img_rows_c_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    LEF_Img_rows_c_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    LEF_Img_rows_c_full_n : IN STD_LOGIC;
    LEF_Img_rows_c_write : OUT STD_LOGIC );
end;


architecture behav of hud_accel_extractExposureFrames_0_8_8_2160_3840_2_3_3_3_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_hdrSrc_cols_blk_n : STD_LOGIC;
    signal LEF_Img_rows_c_blk_n : STD_LOGIC;
    signal p_hdrSrc_cols_read_reg_127 : STD_LOGIC_VECTOR (11 downto 0);
    signal extractor_buff_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal extractor_buff_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal extractor_buff_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal extractor_buff_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal extractor_buff_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal extractor_buff_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal extractor_buff_6_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal extractor_buff_7_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_extract_fu_102_ap_start : STD_LOGIC;
    signal grp_extract_fu_102_ap_done : STD_LOGIC;
    signal grp_extract_fu_102_ap_idle : STD_LOGIC;
    signal grp_extract_fu_102_ap_ready : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_0_ce0 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_0_ce1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_0_we1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_0_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_extract_fu_102_this_buff_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_1_ce0 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_1_ce1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_1_we1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_extract_fu_102_this_buff_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_2_ce0 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_2_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_2_ce1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_2_we1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_2_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_extract_fu_102_this_buff_3_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_3_ce0 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_3_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_3_ce1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_3_we1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_3_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_extract_fu_102_this_buff_4_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_4_ce0 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_4_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_4_ce1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_4_we1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_4_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_extract_fu_102_this_buff_5_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_5_ce0 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_5_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_5_ce1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_5_we1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_5_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_extract_fu_102_this_buff_6_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_6_ce0 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_6_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_6_ce1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_6_we1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_6_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_extract_fu_102_this_buff_7_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_7_ce0 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_7_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_extract_fu_102_this_buff_7_ce1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_7_we1 : STD_LOGIC;
    signal grp_extract_fu_102_this_buff_7_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_extract_fu_102_InImg_data156_read : STD_LOGIC;
    signal grp_extract_fu_102_LEF_Img_data157_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_extract_fu_102_LEF_Img_data157_write : STD_LOGIC;
    signal grp_extract_fu_102_SEF_Img_data158_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_extract_fu_102_SEF_Img_data158_write : STD_LOGIC;
    signal grp_extract_fu_102_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component hud_accel_extract IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        this_buff_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_0_ce0 : OUT STD_LOGIC;
        this_buff_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        this_buff_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_0_ce1 : OUT STD_LOGIC;
        this_buff_0_we1 : OUT STD_LOGIC;
        this_buff_0_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        this_buff_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_1_ce0 : OUT STD_LOGIC;
        this_buff_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        this_buff_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_1_ce1 : OUT STD_LOGIC;
        this_buff_1_we1 : OUT STD_LOGIC;
        this_buff_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        this_buff_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_2_ce0 : OUT STD_LOGIC;
        this_buff_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        this_buff_2_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_2_ce1 : OUT STD_LOGIC;
        this_buff_2_we1 : OUT STD_LOGIC;
        this_buff_2_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        this_buff_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_3_ce0 : OUT STD_LOGIC;
        this_buff_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        this_buff_3_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_3_ce1 : OUT STD_LOGIC;
        this_buff_3_we1 : OUT STD_LOGIC;
        this_buff_3_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        this_buff_4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_4_ce0 : OUT STD_LOGIC;
        this_buff_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        this_buff_4_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_4_ce1 : OUT STD_LOGIC;
        this_buff_4_we1 : OUT STD_LOGIC;
        this_buff_4_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        this_buff_5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_5_ce0 : OUT STD_LOGIC;
        this_buff_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        this_buff_5_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_5_ce1 : OUT STD_LOGIC;
        this_buff_5_we1 : OUT STD_LOGIC;
        this_buff_5_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        this_buff_6_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_6_ce0 : OUT STD_LOGIC;
        this_buff_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        this_buff_6_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_6_ce1 : OUT STD_LOGIC;
        this_buff_6_we1 : OUT STD_LOGIC;
        this_buff_6_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        this_buff_7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_7_ce0 : OUT STD_LOGIC;
        this_buff_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        this_buff_7_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        this_buff_7_ce1 : OUT STD_LOGIC;
        this_buff_7_we1 : OUT STD_LOGIC;
        this_buff_7_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        p_read5 : IN STD_LOGIC_VECTOR (11 downto 0);
        InImg_data156_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        InImg_data156_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        InImg_data156_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        InImg_data156_empty_n : IN STD_LOGIC;
        InImg_data156_read : OUT STD_LOGIC;
        p_read14 : IN STD_LOGIC_VECTOR (11 downto 0);
        LEF_Img_data157_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        LEF_Img_data157_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        LEF_Img_data157_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        LEF_Img_data157_full_n : IN STD_LOGIC;
        LEF_Img_data157_write : OUT STD_LOGIC;
        SEF_Img_data158_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        SEF_Img_data158_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        SEF_Img_data158_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        SEF_Img_data158_full_n : IN STD_LOGIC;
        SEF_Img_data158_write : OUT STD_LOGIC );
    end component;


    component hud_accel_extractExposureFrames_0_8_8_2160_3840_2_3_3_3_0_s_extractor_buff_0_RAM_S2P_BRbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    extractor_buff_0_U : component hud_accel_extractExposureFrames_0_8_8_2160_3840_2_3_3_3_0_s_extractor_buff_0_RAM_S2P_BRbkb
    generic map (
        DataWidth => 16,
        AddressRange => 1924,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_extract_fu_102_this_buff_0_address0,
        ce0 => grp_extract_fu_102_this_buff_0_ce0,
        q0 => extractor_buff_0_q0,
        address1 => grp_extract_fu_102_this_buff_0_address1,
        ce1 => grp_extract_fu_102_this_buff_0_ce1,
        we1 => grp_extract_fu_102_this_buff_0_we1,
        d1 => grp_extract_fu_102_this_buff_0_d1);

    extractor_buff_1_U : component hud_accel_extractExposureFrames_0_8_8_2160_3840_2_3_3_3_0_s_extractor_buff_0_RAM_S2P_BRbkb
    generic map (
        DataWidth => 16,
        AddressRange => 1924,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_extract_fu_102_this_buff_1_address0,
        ce0 => grp_extract_fu_102_this_buff_1_ce0,
        q0 => extractor_buff_1_q0,
        address1 => grp_extract_fu_102_this_buff_1_address1,
        ce1 => grp_extract_fu_102_this_buff_1_ce1,
        we1 => grp_extract_fu_102_this_buff_1_we1,
        d1 => grp_extract_fu_102_this_buff_1_d1);

    extractor_buff_2_U : component hud_accel_extractExposureFrames_0_8_8_2160_3840_2_3_3_3_0_s_extractor_buff_0_RAM_S2P_BRbkb
    generic map (
        DataWidth => 16,
        AddressRange => 1924,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_extract_fu_102_this_buff_2_address0,
        ce0 => grp_extract_fu_102_this_buff_2_ce0,
        q0 => extractor_buff_2_q0,
        address1 => grp_extract_fu_102_this_buff_2_address1,
        ce1 => grp_extract_fu_102_this_buff_2_ce1,
        we1 => grp_extract_fu_102_this_buff_2_we1,
        d1 => grp_extract_fu_102_this_buff_2_d1);

    extractor_buff_3_U : component hud_accel_extractExposureFrames_0_8_8_2160_3840_2_3_3_3_0_s_extractor_buff_0_RAM_S2P_BRbkb
    generic map (
        DataWidth => 16,
        AddressRange => 1924,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_extract_fu_102_this_buff_3_address0,
        ce0 => grp_extract_fu_102_this_buff_3_ce0,
        q0 => extractor_buff_3_q0,
        address1 => grp_extract_fu_102_this_buff_3_address1,
        ce1 => grp_extract_fu_102_this_buff_3_ce1,
        we1 => grp_extract_fu_102_this_buff_3_we1,
        d1 => grp_extract_fu_102_this_buff_3_d1);

    extractor_buff_4_U : component hud_accel_extractExposureFrames_0_8_8_2160_3840_2_3_3_3_0_s_extractor_buff_0_RAM_S2P_BRbkb
    generic map (
        DataWidth => 16,
        AddressRange => 1924,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_extract_fu_102_this_buff_4_address0,
        ce0 => grp_extract_fu_102_this_buff_4_ce0,
        q0 => extractor_buff_4_q0,
        address1 => grp_extract_fu_102_this_buff_4_address1,
        ce1 => grp_extract_fu_102_this_buff_4_ce1,
        we1 => grp_extract_fu_102_this_buff_4_we1,
        d1 => grp_extract_fu_102_this_buff_4_d1);

    extractor_buff_5_U : component hud_accel_extractExposureFrames_0_8_8_2160_3840_2_3_3_3_0_s_extractor_buff_0_RAM_S2P_BRbkb
    generic map (
        DataWidth => 16,
        AddressRange => 1924,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_extract_fu_102_this_buff_5_address0,
        ce0 => grp_extract_fu_102_this_buff_5_ce0,
        q0 => extractor_buff_5_q0,
        address1 => grp_extract_fu_102_this_buff_5_address1,
        ce1 => grp_extract_fu_102_this_buff_5_ce1,
        we1 => grp_extract_fu_102_this_buff_5_we1,
        d1 => grp_extract_fu_102_this_buff_5_d1);

    extractor_buff_6_U : component hud_accel_extractExposureFrames_0_8_8_2160_3840_2_3_3_3_0_s_extractor_buff_0_RAM_S2P_BRbkb
    generic map (
        DataWidth => 16,
        AddressRange => 1924,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_extract_fu_102_this_buff_6_address0,
        ce0 => grp_extract_fu_102_this_buff_6_ce0,
        q0 => extractor_buff_6_q0,
        address1 => grp_extract_fu_102_this_buff_6_address1,
        ce1 => grp_extract_fu_102_this_buff_6_ce1,
        we1 => grp_extract_fu_102_this_buff_6_we1,
        d1 => grp_extract_fu_102_this_buff_6_d1);

    extractor_buff_7_U : component hud_accel_extractExposureFrames_0_8_8_2160_3840_2_3_3_3_0_s_extractor_buff_0_RAM_S2P_BRbkb
    generic map (
        DataWidth => 16,
        AddressRange => 1924,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_extract_fu_102_this_buff_7_address0,
        ce0 => grp_extract_fu_102_this_buff_7_ce0,
        q0 => extractor_buff_7_q0,
        address1 => grp_extract_fu_102_this_buff_7_address1,
        ce1 => grp_extract_fu_102_this_buff_7_ce1,
        we1 => grp_extract_fu_102_this_buff_7_we1,
        d1 => grp_extract_fu_102_this_buff_7_d1);

    grp_extract_fu_102 : component hud_accel_extract
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_extract_fu_102_ap_start,
        ap_done => grp_extract_fu_102_ap_done,
        ap_idle => grp_extract_fu_102_ap_idle,
        ap_ready => grp_extract_fu_102_ap_ready,
        this_buff_0_address0 => grp_extract_fu_102_this_buff_0_address0,
        this_buff_0_ce0 => grp_extract_fu_102_this_buff_0_ce0,
        this_buff_0_q0 => extractor_buff_0_q0,
        this_buff_0_address1 => grp_extract_fu_102_this_buff_0_address1,
        this_buff_0_ce1 => grp_extract_fu_102_this_buff_0_ce1,
        this_buff_0_we1 => grp_extract_fu_102_this_buff_0_we1,
        this_buff_0_d1 => grp_extract_fu_102_this_buff_0_d1,
        this_buff_1_address0 => grp_extract_fu_102_this_buff_1_address0,
        this_buff_1_ce0 => grp_extract_fu_102_this_buff_1_ce0,
        this_buff_1_q0 => extractor_buff_1_q0,
        this_buff_1_address1 => grp_extract_fu_102_this_buff_1_address1,
        this_buff_1_ce1 => grp_extract_fu_102_this_buff_1_ce1,
        this_buff_1_we1 => grp_extract_fu_102_this_buff_1_we1,
        this_buff_1_d1 => grp_extract_fu_102_this_buff_1_d1,
        this_buff_2_address0 => grp_extract_fu_102_this_buff_2_address0,
        this_buff_2_ce0 => grp_extract_fu_102_this_buff_2_ce0,
        this_buff_2_q0 => extractor_buff_2_q0,
        this_buff_2_address1 => grp_extract_fu_102_this_buff_2_address1,
        this_buff_2_ce1 => grp_extract_fu_102_this_buff_2_ce1,
        this_buff_2_we1 => grp_extract_fu_102_this_buff_2_we1,
        this_buff_2_d1 => grp_extract_fu_102_this_buff_2_d1,
        this_buff_3_address0 => grp_extract_fu_102_this_buff_3_address0,
        this_buff_3_ce0 => grp_extract_fu_102_this_buff_3_ce0,
        this_buff_3_q0 => extractor_buff_3_q0,
        this_buff_3_address1 => grp_extract_fu_102_this_buff_3_address1,
        this_buff_3_ce1 => grp_extract_fu_102_this_buff_3_ce1,
        this_buff_3_we1 => grp_extract_fu_102_this_buff_3_we1,
        this_buff_3_d1 => grp_extract_fu_102_this_buff_3_d1,
        this_buff_4_address0 => grp_extract_fu_102_this_buff_4_address0,
        this_buff_4_ce0 => grp_extract_fu_102_this_buff_4_ce0,
        this_buff_4_q0 => extractor_buff_4_q0,
        this_buff_4_address1 => grp_extract_fu_102_this_buff_4_address1,
        this_buff_4_ce1 => grp_extract_fu_102_this_buff_4_ce1,
        this_buff_4_we1 => grp_extract_fu_102_this_buff_4_we1,
        this_buff_4_d1 => grp_extract_fu_102_this_buff_4_d1,
        this_buff_5_address0 => grp_extract_fu_102_this_buff_5_address0,
        this_buff_5_ce0 => grp_extract_fu_102_this_buff_5_ce0,
        this_buff_5_q0 => extractor_buff_5_q0,
        this_buff_5_address1 => grp_extract_fu_102_this_buff_5_address1,
        this_buff_5_ce1 => grp_extract_fu_102_this_buff_5_ce1,
        this_buff_5_we1 => grp_extract_fu_102_this_buff_5_we1,
        this_buff_5_d1 => grp_extract_fu_102_this_buff_5_d1,
        this_buff_6_address0 => grp_extract_fu_102_this_buff_6_address0,
        this_buff_6_ce0 => grp_extract_fu_102_this_buff_6_ce0,
        this_buff_6_q0 => extractor_buff_6_q0,
        this_buff_6_address1 => grp_extract_fu_102_this_buff_6_address1,
        this_buff_6_ce1 => grp_extract_fu_102_this_buff_6_ce1,
        this_buff_6_we1 => grp_extract_fu_102_this_buff_6_we1,
        this_buff_6_d1 => grp_extract_fu_102_this_buff_6_d1,
        this_buff_7_address0 => grp_extract_fu_102_this_buff_7_address0,
        this_buff_7_ce0 => grp_extract_fu_102_this_buff_7_ce0,
        this_buff_7_q0 => extractor_buff_7_q0,
        this_buff_7_address1 => grp_extract_fu_102_this_buff_7_address1,
        this_buff_7_ce1 => grp_extract_fu_102_this_buff_7_ce1,
        this_buff_7_we1 => grp_extract_fu_102_this_buff_7_we1,
        this_buff_7_d1 => grp_extract_fu_102_this_buff_7_d1,
        p_read5 => p_hdrSrc_cols_read_reg_127,
        InImg_data156_dout => InImg_data156_dout,
        InImg_data156_num_data_valid => ap_const_lv3_0,
        InImg_data156_fifo_cap => ap_const_lv3_0,
        InImg_data156_empty_n => InImg_data156_empty_n,
        InImg_data156_read => grp_extract_fu_102_InImg_data156_read,
        p_read14 => p_read,
        LEF_Img_data157_din => grp_extract_fu_102_LEF_Img_data157_din,
        LEF_Img_data157_num_data_valid => ap_const_lv3_0,
        LEF_Img_data157_fifo_cap => ap_const_lv3_0,
        LEF_Img_data157_full_n => LEF_Img_data157_full_n,
        LEF_Img_data157_write => grp_extract_fu_102_LEF_Img_data157_write,
        SEF_Img_data158_din => grp_extract_fu_102_SEF_Img_data158_din,
        SEF_Img_data158_num_data_valid => ap_const_lv3_0,
        SEF_Img_data158_fifo_cap => ap_const_lv3_0,
        SEF_Img_data158_full_n => SEF_Img_data158_full_n,
        SEF_Img_data158_write => grp_extract_fu_102_SEF_Img_data158_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_extract_fu_102_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_extract_fu_102_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_extract_fu_102_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_extract_fu_102_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_extract_fu_102_ap_ready = ap_const_logic_1)) then 
                    grp_extract_fu_102_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                p_hdrSrc_cols_read_reg_127 <= p_hdrSrc_cols_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, p_hdrSrc_cols_empty_n, LEF_Img_rows_c_full_n, grp_extract_fu_102_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = LEF_Img_rows_c_full_n) or (p_hdrSrc_cols_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_extract_fu_102_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    InImg_data156_read_assign_proc : process(grp_extract_fu_102_InImg_data156_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            InImg_data156_read <= grp_extract_fu_102_InImg_data156_read;
        else 
            InImg_data156_read <= ap_const_logic_0;
        end if; 
    end process;

    LEF_Img_data157_din <= grp_extract_fu_102_LEF_Img_data157_din;

    LEF_Img_data157_write_assign_proc : process(grp_extract_fu_102_LEF_Img_data157_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            LEF_Img_data157_write <= grp_extract_fu_102_LEF_Img_data157_write;
        else 
            LEF_Img_data157_write <= ap_const_logic_0;
        end if; 
    end process;


    LEF_Img_rows_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, LEF_Img_rows_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            LEF_Img_rows_c_blk_n <= LEF_Img_rows_c_full_n;
        else 
            LEF_Img_rows_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    LEF_Img_rows_c_din <= p_read;

    LEF_Img_rows_c_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_hdrSrc_cols_empty_n, LEF_Img_rows_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = LEF_Img_rows_c_full_n) or (p_hdrSrc_cols_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            LEF_Img_rows_c_write <= ap_const_logic_1;
        else 
            LEF_Img_rows_c_write <= ap_const_logic_0;
        end if; 
    end process;

    SEF_Img_data158_din <= grp_extract_fu_102_SEF_Img_data158_din;

    SEF_Img_data158_write_assign_proc : process(grp_extract_fu_102_SEF_Img_data158_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            SEF_Img_data158_write <= grp_extract_fu_102_SEF_Img_data158_write;
        else 
            SEF_Img_data158_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, p_hdrSrc_cols_empty_n, LEF_Img_rows_c_full_n)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_const_logic_0 = LEF_Img_rows_c_full_n) or (p_hdrSrc_cols_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_extract_fu_102_ap_done)
    begin
        if ((grp_extract_fu_102_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, p_hdrSrc_cols_empty_n, LEF_Img_rows_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = LEF_Img_rows_c_full_n) or (p_hdrSrc_cols_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_extract_fu_102_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_extract_fu_102_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_extract_fu_102_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_extract_fu_102_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_extract_fu_102_ap_start <= grp_extract_fu_102_ap_start_reg;

    p_hdrSrc_cols_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_hdrSrc_cols_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_hdrSrc_cols_blk_n <= p_hdrSrc_cols_empty_n;
        else 
            p_hdrSrc_cols_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_hdrSrc_cols_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_hdrSrc_cols_empty_n, LEF_Img_rows_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = LEF_Img_rows_c_full_n) or (p_hdrSrc_cols_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_hdrSrc_cols_read <= ap_const_logic_1;
        else 
            p_hdrSrc_cols_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
