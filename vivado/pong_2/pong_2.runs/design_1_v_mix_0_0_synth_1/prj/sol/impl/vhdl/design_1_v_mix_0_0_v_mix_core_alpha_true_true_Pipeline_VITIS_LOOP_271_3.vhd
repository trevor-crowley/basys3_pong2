-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_mix_0_0_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outLayer0_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    outLayer0_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    outLayer0_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    outLayer0_empty_n : IN STD_LOGIC;
    outLayer0_read : OUT STD_LOGIC;
    srcLayer1x_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    srcLayer1x_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    srcLayer1x_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    srcLayer1x_empty_n : IN STD_LOGIC;
    srcLayer1x_read : OUT STD_LOGIC;
    srcLayer1Alphax_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    srcLayer1Alphax_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    srcLayer1Alphax_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    srcLayer1Alphax_empty_n : IN STD_LOGIC;
    srcLayer1Alphax_read : OUT STD_LOGIC;
    outLayer1_din : OUT STD_LOGIC_VECTOR (23 downto 0);
    outLayer1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    outLayer1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    outLayer1_full_n : IN STD_LOGIC;
    outLayer1_write : OUT STD_LOGIC;
    width : IN STD_LOGIC_VECTOR (9 downto 0);
    zext_ln301 : IN STD_LOGIC_VECTOR (8 downto 0);
    bkgpix_val_V_2 : IN STD_LOGIC_VECTOR (7 downto 0);
    bkgpix_val_V_1 : IN STD_LOGIC_VECTOR (7 downto 0);
    bkgpix_val_V : IN STD_LOGIC_VECTOR (7 downto 0);
    layerStartX : IN STD_LOGIC_VECTOR (15 downto 0);
    add75 : IN STD_LOGIC_VECTOR (16 downto 0);
    and_ln285 : IN STD_LOGIC_VECTOR (0 downto 0);
    tobool83_not : IN STD_LOGIC_VECTOR (0 downto 0);
    hwReg_layerEnable_load_cast : IN STD_LOGIC_VECTOR (0 downto 0);
    p_0_2_0_0_026_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    p_0_2_0_0_026_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_0_2_0_0_026_out_o_ap_vld : OUT STD_LOGIC;
    p_0_1_0_0_024_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    p_0_1_0_0_024_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_0_1_0_0_024_out_o_ap_vld : OUT STD_LOGIC;
    p_0_0_0_0_022_out_i : IN STD_LOGIC_VECTOR (7 downto 0);
    p_0_0_0_0_022_out_o : OUT STD_LOGIC_VECTOR (7 downto 0);
    p_0_0_0_0_022_out_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of design_1_v_mix_0_0_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln271_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op45_read_state2 : BOOLEAN;
    signal or_ln285_reg_606 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op50_read_state2 : BOOLEAN;
    signal ap_predicate_op54_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln271_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal outLayer1_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal outLayer0_blk_n : STD_LOGIC;
    signal srcLayer1x_blk_n : STD_LOGIC;
    signal srcLayer1Alphax_blk_n : STD_LOGIC;
    signal rhs_6_reg_189 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_6_reg_189_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal rhs_3_reg_199 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_3_reg_199_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_reg_209 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_reg_209_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal hwReg_layerEnable_load_cast_read_read_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln301_cast_fu_230_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln301_cast_reg_597 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln285_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_fu_309_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1540_fu_438_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_rhs_6_reg_189 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_rhs_6_reg_189 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_rhs_6_reg_189 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_rhs_3_reg_199 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_rhs_3_reg_199 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_rhs_3_reg_199 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_rhs_reg_209 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_rhs_reg_209 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_rhs_reg_209 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_reg_219 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_219 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_219 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln145_1_fu_333_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_fu_100 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_12_fu_256_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_11 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln271_fu_242_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln286_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln271_1_fu_246_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln287_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_2_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln286_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln285_1_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln285_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln300_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln260_fu_393_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ppalpha_V_fu_397_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln301_fu_409_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln301_fu_409_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln232_fu_414_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln232_1_fu_418_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln301_fu_409_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_428_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_6_fu_422_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln232_2_fu_446_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln232_3_fu_450_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_7_fu_454_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln232_4_fu_464_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln232_5_fu_468_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_8_fu_472_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1_fu_506_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_544_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_515_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_553_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_fu_524_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_562_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_fu_524_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_515_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1_fu_506_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_544_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_544_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_553_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_553_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_562_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_562_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_544_ce : STD_LOGIC;
    signal grp_fu_553_ce : STD_LOGIC;
    signal grp_fu_562_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln301_fu_409_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_condition_219 : BOOLEAN;
    signal ap_condition_221 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component design_1_v_mix_0_0_mul_9ns_9ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component design_1_v_mix_0_0_mac_muladd_9ns_9s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component design_1_v_mix_0_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_9ns_9ns_17_1_1_U201 : component design_1_v_mix_0_0_mul_9ns_9ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 17)
    port map (
        din0 => mul_ln301_fu_409_p0,
        din1 => mul_ln301_fu_409_p1,
        dout => mul_ln301_fu_409_p2);

    mac_muladd_9ns_9s_16ns_16_4_1_U202 : component design_1_v_mix_0_0_mac_muladd_9ns_9s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_544_p0,
        din1 => ret_V_6_fu_422_p2,
        din2 => grp_fu_544_p2,
        ce => grp_fu_544_ce,
        dout => grp_fu_544_p3);

    mac_muladd_9ns_9s_16ns_16_4_1_U203 : component design_1_v_mix_0_0_mac_muladd_9ns_9s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_553_p0,
        din1 => ret_V_7_fu_454_p2,
        din2 => grp_fu_553_p2,
        ce => grp_fu_553_ce,
        dout => grp_fu_553_p3);

    mac_muladd_9ns_9s_16ns_16_4_1_U204 : component design_1_v_mix_0_0_mac_muladd_9ns_9s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_562_p0,
        din1 => ret_V_8_fu_472_p2,
        din2 => grp_fu_562_p2,
        ce => grp_fu_562_ce,
        dout => grp_fu_562_p3);

    flow_control_loop_pipe_sequential_init_U : component design_1_v_mix_0_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_empty_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_219)) then
                if (((or_ln285_fu_298_p2 = ap_const_lv1_1) and (icmp_ln271_fu_250_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_empty_reg_219 <= ap_const_lv8_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_reg_219 <= ap_phi_reg_pp0_iter0_empty_reg_219;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_rhs_3_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_219)) then
                if (((hwReg_layerEnable_load_cast_read_read_fu_104_p2 = ap_const_lv1_0) and (icmp_ln271_fu_250_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_rhs_3_reg_199 <= bkgpix_val_V_1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_rhs_3_reg_199 <= ap_phi_reg_pp0_iter0_rhs_3_reg_199;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_rhs_6_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_219)) then
                if (((hwReg_layerEnable_load_cast_read_read_fu_104_p2 = ap_const_lv1_0) and (icmp_ln271_fu_250_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_rhs_6_reg_189 <= bkgpix_val_V_2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_rhs_6_reg_189 <= ap_phi_reg_pp0_iter0_rhs_6_reg_189;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_rhs_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_219)) then
                if (((hwReg_layerEnable_load_cast_read_read_fu_104_p2 = ap_const_lv1_0) and (icmp_ln271_fu_250_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_rhs_reg_209 <= bkgpix_val_V;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_rhs_reg_209 <= ap_phi_reg_pp0_iter0_rhs_reg_209;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_empty_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_221)) then
                if (((or_ln285_reg_606 = ap_const_lv1_0) and (icmp_ln271_reg_602 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_empty_reg_219 <= srcLayer1Alphax_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_empty_reg_219 <= ap_phi_reg_pp0_iter1_empty_reg_219;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_rhs_3_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_221)) then
                if (((hwReg_layerEnable_load_cast = ap_const_lv1_1) and (icmp_ln271_reg_602 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_rhs_3_reg_199 <= outLayer0_dout(15 downto 8);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_rhs_3_reg_199 <= ap_phi_reg_pp0_iter1_rhs_3_reg_199;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_rhs_6_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_221)) then
                if (((hwReg_layerEnable_load_cast = ap_const_lv1_1) and (icmp_ln271_reg_602 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_rhs_6_reg_189 <= outLayer0_dout(23 downto 16);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_rhs_6_reg_189 <= ap_phi_reg_pp0_iter1_rhs_6_reg_189;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_rhs_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_221)) then
                if (((hwReg_layerEnable_load_cast = ap_const_lv1_1) and (icmp_ln271_reg_602 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_rhs_reg_209 <= trunc_ln145_fu_309_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_rhs_reg_209 <= ap_phi_reg_pp0_iter1_rhs_reg_209;
                end if;
            end if; 
        end if;
    end process;

    x_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln271_fu_250_p2 = ap_const_lv1_0))) then 
                    x_fu_100 <= x_12_fu_256_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_100 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln271_reg_602 <= icmp_ln271_fu_250_p2;
                    zext_ln301_cast_reg_597(8 downto 0) <= zext_ln301_cast_fu_230_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                rhs_3_reg_199_pp0_iter3_reg <= rhs_3_reg_199;
                rhs_6_reg_189_pp0_iter3_reg <= rhs_6_reg_189;
                rhs_reg_209_pp0_iter3_reg <= rhs_reg_209;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln271_fu_250_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_ln285_reg_606 <= or_ln285_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                rhs_3_reg_199 <= ap_phi_reg_pp0_iter2_rhs_3_reg_199;
                rhs_6_reg_189 <= ap_phi_reg_pp0_iter2_rhs_6_reg_189;
                rhs_reg_209 <= ap_phi_reg_pp0_iter2_rhs_reg_209;
            end if;
        end if;
    end process;
    zext_ln301_cast_reg_597(16 downto 9) <= "00000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln285_1_fu_286_p2 <= (xor_ln286_fu_268_p2 and and_ln285_2_fu_280_p2);
    and_ln285_2_fu_280_p2 <= (icmp_ln287_fu_274_p2 and and_ln285);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, outLayer0_empty_n, ap_predicate_op45_read_state2, srcLayer1x_empty_n, ap_predicate_op50_read_state2, srcLayer1Alphax_empty_n, ap_predicate_op54_read_state2, outLayer1_full_n)
    begin
                ap_block_pp0_stage0_01001 <= (((outLayer1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op54_read_state2 = ap_const_boolean_1) and (srcLayer1Alphax_empty_n = ap_const_logic_0)) or ((ap_predicate_op50_read_state2 = ap_const_boolean_1) and (srcLayer1x_empty_n = ap_const_logic_0)) or ((ap_predicate_op45_read_state2 = ap_const_boolean_1) and (outLayer0_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, outLayer0_empty_n, ap_predicate_op45_read_state2, srcLayer1x_empty_n, ap_predicate_op50_read_state2, srcLayer1Alphax_empty_n, ap_predicate_op54_read_state2, outLayer1_full_n)
    begin
                ap_block_pp0_stage0_11001 <= (((outLayer1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op54_read_state2 = ap_const_boolean_1) and (srcLayer1Alphax_empty_n = ap_const_logic_0)) or ((ap_predicate_op50_read_state2 = ap_const_boolean_1) and (srcLayer1x_empty_n = ap_const_logic_0)) or ((ap_predicate_op45_read_state2 = ap_const_boolean_1) and (outLayer0_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, outLayer0_empty_n, ap_predicate_op45_read_state2, srcLayer1x_empty_n, ap_predicate_op50_read_state2, srcLayer1Alphax_empty_n, ap_predicate_op54_read_state2, outLayer1_full_n)
    begin
                ap_block_pp0_stage0_subdone <= (((outLayer1_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((ap_predicate_op54_read_state2 = ap_const_boolean_1) and (srcLayer1Alphax_empty_n = ap_const_logic_0)) or ((ap_predicate_op50_read_state2 = ap_const_boolean_1) and (srcLayer1x_empty_n = ap_const_logic_0)) or ((ap_predicate_op45_read_state2 = ap_const_boolean_1) and (outLayer0_empty_n = ap_const_logic_0)))));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(outLayer0_empty_n, ap_predicate_op45_read_state2, srcLayer1x_empty_n, ap_predicate_op50_read_state2, srcLayer1Alphax_empty_n, ap_predicate_op54_read_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((ap_predicate_op54_read_state2 = ap_const_boolean_1) and (srcLayer1Alphax_empty_n = ap_const_logic_0)) or ((ap_predicate_op50_read_state2 = ap_const_boolean_1) and (srcLayer1x_empty_n = ap_const_logic_0)) or ((ap_predicate_op45_read_state2 = ap_const_boolean_1) and (outLayer0_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter5_assign_proc : process(outLayer1_full_n)
    begin
                ap_block_state6_pp0_stage0_iter5 <= (outLayer1_full_n = ap_const_logic_0);
    end process;


    ap_condition_219_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_219 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_221_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_221 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln271_fu_250_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln271_fu_250_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_phi_reg_pp0_iter0_empty_reg_219 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_rhs_3_reg_199 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_rhs_6_reg_189 <= "XXXXXXXX";
    ap_phi_reg_pp0_iter0_rhs_reg_209 <= "XXXXXXXX";

    ap_predicate_op45_read_state2_assign_proc : process(icmp_ln271_reg_602, hwReg_layerEnable_load_cast)
    begin
                ap_predicate_op45_read_state2 <= ((hwReg_layerEnable_load_cast = ap_const_lv1_1) and (icmp_ln271_reg_602 = ap_const_lv1_0));
    end process;


    ap_predicate_op50_read_state2_assign_proc : process(icmp_ln271_reg_602, or_ln285_reg_606)
    begin
                ap_predicate_op50_read_state2 <= ((or_ln285_reg_606 = ap_const_lv1_0) and (icmp_ln271_reg_602 = ap_const_lv1_0));
    end process;


    ap_predicate_op54_read_state2_assign_proc : process(icmp_ln271_reg_602, or_ln285_reg_606)
    begin
                ap_predicate_op54_read_state2 <= ((or_ln285_reg_606 = ap_const_lv1_0) and (icmp_ln271_reg_602 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_11_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_100, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_x_11 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_x_11 <= x_fu_100;
        end if; 
    end process;


    grp_fu_544_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_544_ce <= ap_const_logic_1;
        else 
            grp_fu_544_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_544_p0 <= zext_ln1540_fu_438_p1(9 - 1 downto 0);
    grp_fu_544_p2 <= (rhs_reg_209_pp0_iter3_reg & ap_const_lv8_0);

    grp_fu_553_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_553_ce <= ap_const_logic_1;
        else 
            grp_fu_553_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_553_p0 <= zext_ln1540_fu_438_p1(9 - 1 downto 0);
    grp_fu_553_p2 <= (rhs_3_reg_199_pp0_iter3_reg & ap_const_lv8_0);

    grp_fu_562_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_562_ce <= ap_const_logic_1;
        else 
            grp_fu_562_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_562_p0 <= zext_ln1540_fu_438_p1(9 - 1 downto 0);
    grp_fu_562_p2 <= (rhs_6_reg_189_pp0_iter3_reg & ap_const_lv8_0);
    hwReg_layerEnable_load_cast_read_read_fu_104_p2 <= hwReg_layerEnable_load_cast;
    icmp_ln271_fu_250_p2 <= "1" when (ap_sig_allocacmp_x_11 = width) else "0";
    icmp_ln286_fu_262_p2 <= "1" when (unsigned(zext_ln271_fu_242_p1) < unsigned(layerStartX)) else "0";
    icmp_ln287_fu_274_p2 <= "1" when (unsigned(zext_ln271_1_fu_246_p1) < unsigned(add75)) else "0";
    icmp_ln300_fu_387_p2 <= "1" when (ap_phi_reg_pp0_iter2_empty_reg_219 = ap_const_lv8_FF) else "0";
    mul_ln301_fu_409_p0 <= zext_ln301_cast_reg_597(9 - 1 downto 0);
    mul_ln301_fu_409_p1 <= mul_ln301_fu_409_p10(9 - 1 downto 0);
    mul_ln301_fu_409_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ppalpha_V_fu_397_p3),17));
    or_ln285_fu_298_p2 <= (xor_ln285_fu_292_p2 or tobool83_not);

    outLayer0_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, outLayer0_empty_n, ap_predicate_op45_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op45_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            outLayer0_blk_n <= outLayer0_empty_n;
        else 
            outLayer0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    outLayer0_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op45_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op45_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            outLayer0_read <= ap_const_logic_1;
        else 
            outLayer0_read <= ap_const_logic_0;
        end if; 
    end process;


    outLayer1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, outLayer1_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            outLayer1_blk_n <= outLayer1_full_n;
        else 
            outLayer1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outLayer1_din <= ((trunc_ln2_fu_524_p4 & tmp_1_fu_515_p4) & trunc_ln1_fu_506_p4);

    outLayer1_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            outLayer1_write <= ap_const_logic_1;
        else 
            outLayer1_write <= ap_const_logic_0;
        end if; 
    end process;


    p_0_0_0_0_022_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln271_reg_602, or_ln285_reg_606, p_0_0_0_0_022_out_i, ap_block_pp0_stage0, trunc_ln145_1_fu_333_p1)
    begin
        if (((or_ln285_reg_606 = ap_const_lv1_0) and (icmp_ln271_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_0_0_0_0_022_out_o <= trunc_ln145_1_fu_333_p1;
        else 
            p_0_0_0_0_022_out_o <= p_0_0_0_0_022_out_i;
        end if; 
    end process;


    p_0_0_0_0_022_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln271_reg_602, or_ln285_reg_606, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln285_reg_606 = ap_const_lv1_0) and (icmp_ln271_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_0_0_0_0_022_out_o_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_0_0_022_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_0_1_0_0_024_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln271_reg_602, srcLayer1x_dout, or_ln285_reg_606, p_0_1_0_0_024_out_i, ap_block_pp0_stage0)
    begin
        if (((or_ln285_reg_606 = ap_const_lv1_0) and (icmp_ln271_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_0_1_0_0_024_out_o <= srcLayer1x_dout(15 downto 8);
        else 
            p_0_1_0_0_024_out_o <= p_0_1_0_0_024_out_i;
        end if; 
    end process;


    p_0_1_0_0_024_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln271_reg_602, or_ln285_reg_606, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln285_reg_606 = ap_const_lv1_0) and (icmp_ln271_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_0_1_0_0_024_out_o_ap_vld <= ap_const_logic_1;
        else 
            p_0_1_0_0_024_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_0_2_0_0_026_out_o_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln271_reg_602, srcLayer1x_dout, or_ln285_reg_606, p_0_2_0_0_026_out_i, ap_block_pp0_stage0)
    begin
        if (((or_ln285_reg_606 = ap_const_lv1_0) and (icmp_ln271_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            p_0_2_0_0_026_out_o <= srcLayer1x_dout(23 downto 16);
        else 
            p_0_2_0_0_026_out_o <= p_0_2_0_0_026_out_i;
        end if; 
    end process;


    p_0_2_0_0_026_out_o_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln271_reg_602, or_ln285_reg_606, ap_block_pp0_stage0_11001)
    begin
        if (((or_ln285_reg_606 = ap_const_lv1_0) and (icmp_ln271_reg_602 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            p_0_2_0_0_026_out_o_ap_vld <= ap_const_logic_1;
        else 
            p_0_2_0_0_026_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ppalpha_V_fu_397_p3 <= 
        ap_const_lv9_100 when (icmp_ln300_fu_387_p2(0) = '1') else 
        zext_ln260_fu_393_p1;
    ret_V_6_fu_422_p2 <= std_logic_vector(unsigned(zext_ln232_fu_414_p1) - unsigned(zext_ln232_1_fu_418_p1));
    ret_V_7_fu_454_p2 <= std_logic_vector(unsigned(zext_ln232_2_fu_446_p1) - unsigned(zext_ln232_3_fu_450_p1));
    ret_V_8_fu_472_p2 <= std_logic_vector(unsigned(zext_ln232_4_fu_464_p1) - unsigned(zext_ln232_5_fu_468_p1));

    srcLayer1Alphax_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, srcLayer1Alphax_empty_n, ap_predicate_op54_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op54_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            srcLayer1Alphax_blk_n <= srcLayer1Alphax_empty_n;
        else 
            srcLayer1Alphax_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    srcLayer1Alphax_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op54_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op54_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcLayer1Alphax_read <= ap_const_logic_1;
        else 
            srcLayer1Alphax_read <= ap_const_logic_0;
        end if; 
    end process;


    srcLayer1x_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, srcLayer1x_empty_n, ap_predicate_op50_read_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op50_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            srcLayer1x_blk_n <= srcLayer1x_empty_n;
        else 
            srcLayer1x_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    srcLayer1x_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op50_read_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op50_read_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            srcLayer1x_read <= ap_const_logic_1;
        else 
            srcLayer1x_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_515_p1 <= grp_fu_553_p3;
    tmp_1_fu_515_p4 <= tmp_1_fu_515_p1(15 downto 8);
    tmp_fu_428_p4 <= mul_ln301_fu_409_p2(16 downto 8);
    trunc_ln145_1_fu_333_p1 <= srcLayer1x_dout(8 - 1 downto 0);
    trunc_ln145_fu_309_p1 <= outLayer0_dout(8 - 1 downto 0);
    trunc_ln1_fu_506_p1 <= grp_fu_544_p3;
    trunc_ln1_fu_506_p4 <= trunc_ln1_fu_506_p1(15 downto 8);
    trunc_ln2_fu_524_p1 <= grp_fu_562_p3;
    trunc_ln2_fu_524_p4 <= trunc_ln2_fu_524_p1(15 downto 8);
    x_12_fu_256_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_11) + unsigned(ap_const_lv10_1));
    xor_ln285_fu_292_p2 <= (ap_const_lv1_1 xor and_ln285_1_fu_286_p2);
    xor_ln286_fu_268_p2 <= (icmp_ln286_fu_262_p2 xor ap_const_lv1_1);
    zext_ln1540_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_428_p4),16));
    zext_ln232_1_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter2_rhs_reg_209),9));
    zext_ln232_2_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_1_0_0_024_out_i),9));
    zext_ln232_3_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter2_rhs_3_reg_199),9));
    zext_ln232_4_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_2_0_0_026_out_i),9));
    zext_ln232_5_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter2_rhs_6_reg_189),9));
    zext_ln232_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_0_0_0_022_out_i),9));
    zext_ln260_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_reg_pp0_iter2_empty_reg_219),9));
    zext_ln271_1_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_11),17));
    zext_ln271_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_11),16));
    zext_ln301_cast_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln301),17));
end behav;
