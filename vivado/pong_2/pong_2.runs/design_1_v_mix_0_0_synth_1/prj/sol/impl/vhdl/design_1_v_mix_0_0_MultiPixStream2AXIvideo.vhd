-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_mix_0_0_MultiPixStream2AXIvideo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out420_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    out420_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    out420_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    out420_empty_n : IN STD_LOGIC;
    out420_read : OUT STD_LOGIC;
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    HwReg_height_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    HwReg_height_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_height_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_height_empty_n : IN STD_LOGIC;
    HwReg_height_read : OUT STD_LOGIC;
    HwReg_width_dout : IN STD_LOGIC_VECTOR (9 downto 0);
    HwReg_width_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_width_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_width_empty_n : IN STD_LOGIC;
    HwReg_width_read : OUT STD_LOGIC );
end;


architecture behav of design_1_v_mix_0_0_MultiPixStream2AXIvideo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal HwReg_height_blk_n : STD_LOGIC;
    signal HwReg_width_blk_n : STD_LOGIC;
    signal grp_reg_unsigned_short_s_fu_117_ap_return : STD_LOGIC_VECTOR (9 downto 0);
    signal rows_reg_196 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_reg_unsigned_short_s_fu_123_ap_return : STD_LOGIC_VECTOR (9 downto 0);
    signal cols_reg_201 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_i_fu_143_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_i_reg_206 : STD_LOGIC_VECTOR (10 downto 0);
    signal cmp32180_i_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp32180_i_reg_211 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_163_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_3_reg_218 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_start : STD_LOGIC;
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_done : STD_LOGIC;
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_idle : STD_LOGIC;
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_ready : STD_LOGIC;
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_out420_read : STD_LOGIC;
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TREADY : STD_LOGIC;
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TVALID : STD_LOGIC;
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln3186_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_74 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal sof_fu_78 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln3138_fu_139_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component design_1_v_mix_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out420_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        out420_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        out420_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        out420_empty_n : IN STD_LOGIC;
        out420_read : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        sof : IN STD_LOGIC_VECTOR (0 downto 0);
        cols : IN STD_LOGIC_VECTOR (9 downto 0);
        sub_i : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component design_1_v_mix_0_0_reg_unsigned_short_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        d : IN STD_LOGIC_VECTOR (9 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94 : component design_1_v_mix_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_start,
        ap_done => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_done,
        ap_idle => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_idle,
        ap_ready => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_ready,
        out420_dout => out420_dout,
        out420_num_data_valid => ap_const_lv2_0,
        out420_fifo_cap => ap_const_lv2_0,
        out420_empty_n => out420_empty_n,
        out420_read => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_out420_read,
        m_axis_video_TREADY => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TREADY,
        sof => sof_fu_78,
        cols => cols_reg_201,
        sub_i => sub_i_reg_206,
        m_axis_video_TDATA => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TDATA,
        m_axis_video_TVALID => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TVALID,
        m_axis_video_TKEEP => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TKEEP,
        m_axis_video_TSTRB => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TSTRB,
        m_axis_video_TUSER => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TUSER,
        m_axis_video_TLAST => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TLAST,
        m_axis_video_TID => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TID,
        m_axis_video_TDEST => grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TDEST);

    grp_reg_unsigned_short_s_fu_117 : component design_1_v_mix_0_0_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        d => HwReg_height_dout,
        ap_return => grp_reg_unsigned_short_s_fu_117_ap_return);

    grp_reg_unsigned_short_s_fu_123 : component design_1_v_mix_0_0_reg_unsigned_short_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        d => HwReg_width_dout,
        ap_return => grp_reg_unsigned_short_s_fu_123_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln3186_fu_158_p2 = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_start_reg <= ap_const_logic_0;
            else
                if (((cmp32180_i_reg_211 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln3186_fu_158_p2 = ap_const_lv1_0))) then 
                    grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_ready = ap_const_logic_1)) then 
                    grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = HwReg_width_empty_n) or (ap_const_logic_0 = HwReg_height_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_74 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                i_fu_74 <= i_3_reg_218;
            end if; 
        end if;
    end process;

    sof_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = HwReg_width_empty_n) or (ap_const_logic_0 = HwReg_height_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sof_fu_78 <= ap_const_lv1_1;
            elsif (((cmp32180_i_reg_211 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                sof_fu_78 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                cmp32180_i_reg_211 <= cmp32180_i_fu_149_p2;
                cols_reg_201 <= grp_reg_unsigned_short_s_fu_123_ap_return;
                rows_reg_196 <= grp_reg_unsigned_short_s_fu_117_ap_return;
                sub_i_reg_206 <= sub_i_fu_143_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_3_reg_218 <= i_3_fu_163_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, HwReg_height_empty_n, HwReg_width_empty_n, ap_CS_fsm_state3, icmp_ln3186_fu_158_p2, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = HwReg_width_empty_n) or (ap_const_logic_0 = HwReg_height_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln3186_fu_158_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    HwReg_height_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_height_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_height_blk_n <= HwReg_height_empty_n;
        else 
            HwReg_height_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    HwReg_height_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_height_empty_n, HwReg_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = HwReg_width_empty_n) or (ap_const_logic_0 = HwReg_height_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_height_read <= ap_const_logic_1;
        else 
            HwReg_height_read <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_width_blk_n <= HwReg_width_empty_n;
        else 
            HwReg_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    HwReg_width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_height_empty_n, HwReg_width_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = HwReg_width_empty_n) or (ap_const_logic_0 = HwReg_height_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_width_read <= ap_const_logic_1;
        else 
            HwReg_width_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, HwReg_height_empty_n, HwReg_width_empty_n)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_const_logic_0 = HwReg_width_empty_n) or (ap_const_logic_0 = HwReg_height_empty_n) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, HwReg_height_empty_n, HwReg_width_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = HwReg_width_empty_n) or (ap_const_logic_0 = HwReg_height_empty_n) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(cmp32180_i_reg_211, grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_done = ap_const_logic_0) and (cmp32180_i_reg_211 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, icmp_ln3186_fu_158_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln3186_fu_158_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln3186_fu_158_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln3186_fu_158_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cmp32180_i_fu_149_p2 <= "1" when (grp_reg_unsigned_short_s_fu_123_ap_return = ap_const_lv10_0) else "0";
    grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_start <= grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_ap_start_reg;
    grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TREADY <= (m_axis_video_TREADY and ap_CS_fsm_state4);
    i_3_fu_163_p2 <= std_logic_vector(unsigned(i_fu_74) + unsigned(ap_const_lv10_1));
    icmp_ln3186_fu_158_p2 <= "1" when (i_fu_74 = rows_reg_196) else "0";
    m_axis_video_TDATA <= grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TDATA;
    m_axis_video_TDEST <= grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TDEST;
    m_axis_video_TID <= grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TID;
    m_axis_video_TKEEP <= grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TKEEP;
    m_axis_video_TLAST <= grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TLAST;
    m_axis_video_TSTRB <= grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TSTRB;
    m_axis_video_TUSER <= grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TUSER;
    m_axis_video_TVALID <= grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_m_axis_video_TVALID;

    out420_read_assign_proc : process(cmp32180_i_reg_211, grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_out420_read, ap_CS_fsm_state4)
    begin
        if (((cmp32180_i_reg_211 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            out420_read <= grp_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_3188_3_fu_94_out420_read;
        else 
            out420_read <= ap_const_logic_0;
        end if; 
    end process;

    sub_i_fu_143_p2 <= std_logic_vector(unsigned(zext_ln3138_fu_139_p1) + unsigned(ap_const_lv11_7FF));
    zext_ln3138_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_reg_unsigned_short_s_fu_123_ap_return),11));
end behav;
