// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_mix_0_0_v_mix_yuv2rgb_false_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        srcLayer0Yuv_dout,
        srcLayer0Yuv_num_data_valid,
        srcLayer0Yuv_fifo_cap,
        srcLayer0Yuv_empty_n,
        srcLayer0Yuv_read,
        height,
        width,
        layerEnableFlag_dout,
        layerEnableFlag_num_data_valid,
        layerEnableFlag_fifo_cap,
        layerEnableFlag_empty_n,
        layerEnableFlag_read,
        outLayer0_din,
        outLayer0_num_data_valid,
        outLayer0_fifo_cap,
        outLayer0_full_n,
        outLayer0_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [23:0] srcLayer0Yuv_dout;
input  [1:0] srcLayer0Yuv_num_data_valid;
input  [1:0] srcLayer0Yuv_fifo_cap;
input   srcLayer0Yuv_empty_n;
output   srcLayer0Yuv_read;
input  [9:0] height;
input  [9:0] width;
input  [0:0] layerEnableFlag_dout;
input  [1:0] layerEnableFlag_num_data_valid;
input  [1:0] layerEnableFlag_fifo_cap;
input   layerEnableFlag_empty_n;
output   layerEnableFlag_read;
output  [23:0] outLayer0_din;
input  [1:0] outLayer0_num_data_valid;
input  [1:0] outLayer0_fifo_cap;
input   outLayer0_full_n;
output   outLayer0_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg srcLayer0Yuv_read;
reg layerEnableFlag_read;
reg outLayer0_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    layerEnableFlag_blk_n;
wire   [0:0] layerEnableFlag_read_read_fu_74_p2;
reg   [0:0] layerEnableFlag_read_reg_123;
wire    grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_start;
wire    grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_done;
wire    grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_idle;
wire    grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_ready;
wire    grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_srcLayer0Yuv_read;
wire   [23:0] grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_outLayer0_din;
wire    grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_outLayer0_write;
reg    grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln854_fu_97_p2;
wire    ap_CS_fsm_state3;
reg   [9:0] y_fu_58;
wire   [9:0] y_4_fu_102_p2;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_start_reg = 1'b0;
end

design_1_v_mix_0_0_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2 grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_start),
    .ap_done(grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_done),
    .ap_idle(grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_idle),
    .ap_ready(grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_ready),
    .srcLayer0Yuv_dout(srcLayer0Yuv_dout),
    .srcLayer0Yuv_num_data_valid(2'd0),
    .srcLayer0Yuv_fifo_cap(2'd0),
    .srcLayer0Yuv_empty_n(srcLayer0Yuv_empty_n),
    .srcLayer0Yuv_read(grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_srcLayer0Yuv_read),
    .outLayer0_din(grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_outLayer0_din),
    .outLayer0_num_data_valid(2'd0),
    .outLayer0_fifo_cap(2'd0),
    .outLayer0_full_n(outLayer0_full_n),
    .outLayer0_write(grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_outLayer0_write),
    .width(width)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln854_fu_97_p2 == 1'd1) | (layerEnableFlag_read_reg_123 == 1'd0)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln854_fu_97_p2 == 1'd0) & (layerEnableFlag_read_reg_123 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_start_reg <= 1'b1;
        end else if ((grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_ready == 1'b1)) begin
            grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (layerEnableFlag_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (layerEnableFlag_read_read_fu_74_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_58 <= 10'd0;
    end else if (((icmp_ln854_fu_97_p2 == 1'd0) & (layerEnableFlag_read_reg_123 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        y_fu_58 <= y_4_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        layerEnableFlag_read_reg_123 <= layerEnableFlag_dout;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (layerEnableFlag_empty_n == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln854_fu_97_p2 == 1'd1) | (layerEnableFlag_read_reg_123 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln854_fu_97_p2 == 1'd1) | (layerEnableFlag_read_reg_123 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layerEnableFlag_blk_n = layerEnableFlag_empty_n;
    end else begin
        layerEnableFlag_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (layerEnableFlag_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layerEnableFlag_read = 1'b1;
    end else begin
        layerEnableFlag_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outLayer0_write = grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_outLayer0_write;
    end else begin
        outLayer0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        srcLayer0Yuv_read = grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_srcLayer0Yuv_read;
    end else begin
        srcLayer0Yuv_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (layerEnableFlag_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln854_fu_97_p2 == 1'd1) | (layerEnableFlag_read_reg_123 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (layerEnableFlag_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_start = grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_ap_start_reg;

assign icmp_ln854_fu_97_p2 = ((y_fu_58 == height) ? 1'b1 : 1'b0);

assign layerEnableFlag_read_read_fu_74_p2 = layerEnableFlag_dout;

assign outLayer0_din = grp_v_mix_yuv2rgb_false_Pipeline_VITIS_LOOP_856_2_fu_80_outLayer0_din;

assign y_4_fu_102_p2 = (y_fu_58 + 10'd1);

endmodule //design_1_v_mix_0_0_v_mix_yuv2rgb_false_s
