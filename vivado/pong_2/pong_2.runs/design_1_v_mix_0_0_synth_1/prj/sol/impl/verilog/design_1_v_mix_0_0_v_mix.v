// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="design_1_v_mix_0_0_v_mix,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.469000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=7225,HLS_SYN_LUT=8912,HLS_VERSION=2022_1}" *)

module design_1_v_mix_0_0_v_mix (
        ap_clk,
        ap_rst_n,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        s_axis_video1_TDATA,
        s_axis_video1_TVALID,
        s_axis_video1_TREADY,
        s_axis_video1_TKEEP,
        s_axis_video1_TSTRB,
        s_axis_video1_TUSER,
        s_axis_video1_TLAST,
        s_axis_video1_TID,
        s_axis_video1_TDEST,
        layerAlpha_0,
        layerStartX_0,
        layerStartY_0,
        layerWidth_0,
        layerHeight_0,
        layerScaleFactor_0,
        layerVideoFormat_address0,
        layerVideoFormat_ce0,
        layerVideoFormat_we0,
        layerVideoFormat_d0,
        layerVideoFormat_q0,
        layerVideoFormat_address1,
        layerVideoFormat_ce1,
        layerVideoFormat_we1,
        layerVideoFormat_d1,
        layerVideoFormat_q1,
        layerStride_0,
        K11,
        K12,
        K13,
        K21,
        K22,
        K23,
        K31,
        K32,
        K33,
        ROffset,
        GOffset,
        BOffset,
        K11_2,
        K12_2,
        K13_2,
        K21_2,
        K22_2,
        K23_2,
        K31_2,
        K32_2,
        K33_2,
        YOffset,
        UOffset,
        VOffset,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 12;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [2:0] s_axis_video_TKEEP;
input  [2:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
input  [31:0] s_axis_video1_TDATA;
input   s_axis_video1_TVALID;
output   s_axis_video1_TREADY;
input  [3:0] s_axis_video1_TKEEP;
input  [3:0] s_axis_video1_TSTRB;
input  [0:0] s_axis_video1_TUSER;
input  [0:0] s_axis_video1_TLAST;
input  [0:0] s_axis_video1_TID;
input  [0:0] s_axis_video1_TDEST;
input  [15:0] layerAlpha_0;
input  [15:0] layerStartX_0;
input  [15:0] layerStartY_0;
input  [15:0] layerWidth_0;
input  [15:0] layerHeight_0;
input  [7:0] layerScaleFactor_0;
output  [0:0] layerVideoFormat_address0;
output   layerVideoFormat_ce0;
output   layerVideoFormat_we0;
output  [7:0] layerVideoFormat_d0;
input  [7:0] layerVideoFormat_q0;
output  [0:0] layerVideoFormat_address1;
output   layerVideoFormat_ce1;
output   layerVideoFormat_we1;
output  [7:0] layerVideoFormat_d1;
input  [7:0] layerVideoFormat_q1;
input  [15:0] layerStride_0;
input  [31:0] K11;
input  [31:0] K12;
input  [31:0] K13;
input  [31:0] K21;
input  [31:0] K22;
input  [31:0] K23;
input  [31:0] K31;
input  [31:0] K32;
input  [31:0] K33;
input  [31:0] ROffset;
input  [31:0] GOffset;
input  [31:0] BOffset;
input  [31:0] K11_2;
input  [31:0] K12_2;
input  [31:0] K13_2;
input  [31:0] K21_2;
input  [31:0] K22_2;
input  [31:0] K23_2;
input  [31:0] K31_2;
input  [31:0] K32_2;
input  [31:0] K33_2;
input  [31:0] YOffset;
input  [31:0] UOffset;
input  [31:0] VOffset;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] width;
wire   [15:0] height;
wire   [15:0] video_format;
wire   [15:0] background_Y_R;
wire   [15:0] background_U_G;
wire   [15:0] background_V_B;
wire   [31:0] layerEnable;
wire   [15:0] layerAlpha_1;
wire   [15:0] layerStartX_1;
wire   [15:0] layerStartY_1;
wire   [15:0] layerWidth_1;
wire   [15:0] layerHeight_1;
wire   [7:0] layerScaleFactor_1;
wire   [15:0] layerStride_1;
wire   [15:0] reserve;
wire   [1:0] HwReg_layerEnable_fu_485_p1;
reg   [1:0] HwReg_layerEnable_reg_749;
wire   [7:0] HwReg_background_V_B_fu_489_p1;
reg   [7:0] HwReg_background_V_B_reg_755;
wire   [7:0] HwReg_background_U_G_fu_493_p1;
reg   [7:0] HwReg_background_U_G_reg_760;
wire   [7:0] HwReg_background_Y_R_fu_497_p1;
reg   [7:0] HwReg_background_Y_R_reg_765;
wire   [9:0] HwReg_height_fu_501_p1;
reg   [9:0] HwReg_height_reg_770;
wire   [9:0] HwReg_width_fu_505_p1;
reg   [9:0] HwReg_width_reg_776;
reg   [15:0] layerAlpha_1_read_reg_787;
reg   [15:0] layerStartX_1_read_reg_797;
reg   [15:0] layerStartY_1_read_reg_807;
reg   [15:0] layerWidth_1_read_reg_817;
reg   [15:0] layerHeight_1_read_reg_827;
reg   [7:0] layerScaleFactor_1_read_reg_837;
wire   [0:0] select_ln2583_fu_602_p3;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln2581_fu_517_p2;
wire   [0:0] select_ln2583_1_fu_610_p3;
reg   [15:0] HwReg_layerStartX_load_reg_855;
wire    ap_CS_fsm_state3;
reg   [15:0] HwReg_layerStartY_load_reg_860;
reg   [15:0] HwReg_layerWidth_load_reg_865;
reg   [15:0] HwReg_layerHeight_load_reg_870;
reg   [7:0] HwReg_layerScaleFactor_load_reg_875;
wire   [9:0] HwReg_layerAlpha_1_fu_701_p1;
reg   [9:0] HwReg_layerAlpha_1_reg_880;
wire   [23:0] grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TDATA;
wire   [2:0] grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TKEEP;
wire   [2:0] grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TSTRB;
wire   [0:0] grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TUSER;
wire   [0:0] grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TLAST;
wire   [0:0] grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TID;
wire   [0:0] grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TDEST;
wire    grp_VMixHlsDataFlowFunction_fu_398_ap_start;
wire    grp_VMixHlsDataFlowFunction_fu_398_s_axis_video_TREADY;
wire    grp_VMixHlsDataFlowFunction_fu_398_s_axis_video1_TREADY;
wire    grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TVALID;
wire    grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TREADY;
wire    grp_VMixHlsDataFlowFunction_fu_398_ap_done;
wire    grp_VMixHlsDataFlowFunction_fu_398_ap_ready;
wire    grp_VMixHlsDataFlowFunction_fu_398_ap_idle;
reg    grp_VMixHlsDataFlowFunction_fu_398_ap_continue;
reg   [0:0] HwReg_layerEnableFlag_1_reg_374;
reg   [0:0] HwReg_layerEnableFlag_reg_386;
reg    grp_VMixHlsDataFlowFunction_fu_398_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_sync_grp_VMixHlsDataFlowFunction_fu_398_ap_ready;
wire    ap_sync_grp_VMixHlsDataFlowFunction_fu_398_ap_done;
reg    ap_block_state4_on_subcall_done;
reg    ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_398_ap_ready;
reg    ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_398_ap_done;
reg   [1:0] i_fu_238;
wire   [1:0] add_ln2581_fu_523_p2;
reg   [15:0] HwReg_layerAlpha_fu_242;
wire   [15:0] select_ln2583_7_fu_658_p3;
reg   [15:0] HwReg_layerStartX_fu_246;
wire   [15:0] select_ln2583_6_fu_650_p3;
reg   [15:0] HwReg_layerStartY_fu_250;
wire   [15:0] select_ln2583_5_fu_642_p3;
reg   [15:0] HwReg_layerWidth_fu_254;
wire   [15:0] select_ln2583_4_fu_634_p3;
reg   [15:0] HwReg_layerHeight_fu_258;
wire   [15:0] select_ln2583_3_fu_626_p3;
reg   [7:0] HwReg_layerScaleFactor_fu_262;
wire   [7:0] select_ln2583_2_fu_618_p3;
wire   [0:0] trunc_ln2583_fu_537_p1;
wire   [1:0] zext_ln2591_fu_541_p1;
wire   [1:0] shl_ln2591_fu_545_p2;
wire   [1:0] and_ln2591_fu_551_p2;
wire   [0:0] icmp_ln2591_fu_556_p2;
wire   [7:0] tmp_3_fu_594_p4;
wire   [15:0] tmp_2_fu_586_p4;
wire   [15:0] tmp_1_fu_578_p4;
wire   [15:0] tmp_s_fu_570_p4;
wire   [15:0] tmp_9_fu_562_p4;
wire   [15:0] tmp_fu_529_p4;
wire    ap_CS_fsm_state5;
wire    regslice_both_m_axis_video_V_data_V_U_apdone_blk;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    regslice_both_s_axis_video_V_data_V_U_apdone_blk;
wire   [23:0] s_axis_video_TDATA_int_regslice;
wire    s_axis_video_TVALID_int_regslice;
reg    s_axis_video_TREADY_int_regslice;
wire    regslice_both_s_axis_video_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video_V_keep_V_U_apdone_blk;
wire   [2:0] s_axis_video_TKEEP_int_regslice;
wire    regslice_both_s_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video_V_strb_V_U_apdone_blk;
wire   [2:0] s_axis_video_TSTRB_int_regslice;
wire    regslice_both_s_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int_regslice;
wire    regslice_both_s_axis_video_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int_regslice;
wire    regslice_both_s_axis_video_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int_regslice;
wire    regslice_both_s_axis_video_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int_regslice;
wire    regslice_both_s_axis_video_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video_V_dest_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_data_V_U_apdone_blk;
wire   [31:0] s_axis_video1_TDATA_int_regslice;
wire    s_axis_video1_TVALID_int_regslice;
reg    s_axis_video1_TREADY_int_regslice;
wire    regslice_both_s_axis_video1_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_keep_V_U_apdone_blk;
wire   [3:0] s_axis_video1_TKEEP_int_regslice;
wire    regslice_both_s_axis_video1_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video1_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_strb_V_U_apdone_blk;
wire   [3:0] s_axis_video1_TSTRB_int_regslice;
wire    regslice_both_s_axis_video1_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video1_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video1_TUSER_int_regslice;
wire    regslice_both_s_axis_video1_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video1_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video1_TLAST_int_regslice;
wire    regslice_both_s_axis_video1_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video1_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video1_TID_int_regslice;
wire    regslice_both_s_axis_video1_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video1_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video1_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video1_TDEST_int_regslice;
wire    regslice_both_s_axis_video1_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video1_V_dest_V_U_ack_in;
wire    m_axis_video_TVALID_int_regslice;
wire    m_axis_video_TREADY_int_regslice;
wire    regslice_both_m_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_VMixHlsDataFlowFunction_fu_398_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_398_ap_ready = 1'b0;
#0 ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_398_ap_done = 1'b0;
end

design_1_v_mix_0_0_VMixHlsDataFlowFunction grp_VMixHlsDataFlowFunction_fu_398(
    .p_read(HwReg_width_reg_776),
    .p_read1(HwReg_height_reg_770),
    .p_read2(HwReg_background_Y_R_reg_765),
    .p_read3(HwReg_background_U_G_reg_760),
    .p_read4(HwReg_background_V_B_reg_755),
    .p_read5(HwReg_layerEnable_reg_749),
    .p_read6(HwReg_layerEnableFlag_1_reg_374),
    .p_read17(HwReg_layerEnableFlag_reg_386),
    .p_read8(HwReg_layerAlpha_1_reg_880),
    .p_read9(HwReg_layerStartX_load_reg_855),
    .p_read10(HwReg_layerStartY_load_reg_860),
    .p_read211(HwReg_width_reg_776),
    .p_read7(HwReg_layerWidth_load_reg_865),
    .p_read312(HwReg_height_reg_770),
    .p_read11(HwReg_layerHeight_load_reg_870),
    .p_read13(HwReg_layerScaleFactor_load_reg_875),
    .s_axis_video_TDATA(s_axis_video_TDATA_int_regslice),
    .s_axis_video_TKEEP(s_axis_video_TKEEP_int_regslice),
    .s_axis_video_TSTRB(s_axis_video_TSTRB_int_regslice),
    .s_axis_video_TUSER(s_axis_video_TUSER_int_regslice),
    .s_axis_video_TLAST(s_axis_video_TLAST_int_regslice),
    .s_axis_video_TID(s_axis_video_TID_int_regslice),
    .s_axis_video_TDEST(s_axis_video_TDEST_int_regslice),
    .s_axis_video1_TDATA(s_axis_video1_TDATA_int_regslice),
    .s_axis_video1_TKEEP(s_axis_video1_TKEEP_int_regslice),
    .s_axis_video1_TSTRB(s_axis_video1_TSTRB_int_regslice),
    .s_axis_video1_TUSER(s_axis_video1_TUSER_int_regslice),
    .s_axis_video1_TLAST(s_axis_video1_TLAST_int_regslice),
    .s_axis_video1_TID(s_axis_video1_TID_int_regslice),
    .s_axis_video1_TDEST(s_axis_video1_TDEST_int_regslice),
    .m_axis_video_TDATA(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TDATA),
    .m_axis_video_TKEEP(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TKEEP),
    .m_axis_video_TSTRB(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TSTRB),
    .m_axis_video_TUSER(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TUSER),
    .m_axis_video_TLAST(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TLAST),
    .m_axis_video_TID(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TID),
    .m_axis_video_TDEST(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TDEST),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .p_read_ap_vld(1'b1),
    .p_read1_ap_vld(1'b1),
    .p_read2_ap_vld(1'b1),
    .p_read3_ap_vld(1'b1),
    .p_read4_ap_vld(1'b1),
    .p_read5_ap_vld(1'b1),
    .p_read8_ap_vld(1'b1),
    .p_read9_ap_vld(1'b1),
    .p_read10_ap_vld(1'b1),
    .p_read13_ap_vld(1'b1),
    .ap_start(grp_VMixHlsDataFlowFunction_fu_398_ap_start),
    .s_axis_video_TVALID(s_axis_video_TVALID_int_regslice),
    .s_axis_video_TREADY(grp_VMixHlsDataFlowFunction_fu_398_s_axis_video_TREADY),
    .p_read312_ap_vld(1'b1),
    .p_read211_ap_vld(1'b1),
    .p_read6_ap_vld(1'b1),
    .s_axis_video1_TVALID(s_axis_video1_TVALID_int_regslice),
    .s_axis_video1_TREADY(grp_VMixHlsDataFlowFunction_fu_398_s_axis_video1_TREADY),
    .p_read11_ap_vld(1'b1),
    .p_read7_ap_vld(1'b1),
    .p_read17_ap_vld(1'b1),
    .m_axis_video_TVALID(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TVALID),
    .m_axis_video_TREADY(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TREADY),
    .ap_done(grp_VMixHlsDataFlowFunction_fu_398_ap_done),
    .ap_ready(grp_VMixHlsDataFlowFunction_fu_398_ap_ready),
    .ap_idle(grp_VMixHlsDataFlowFunction_fu_398_ap_idle),
    .ap_continue(grp_VMixHlsDataFlowFunction_fu_398_ap_continue)
);

design_1_v_mix_0_0_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .width(width),
    .height(height),
    .video_format(video_format),
    .background_Y_R(background_Y_R),
    .background_U_G(background_U_G),
    .background_V_B(background_V_B),
    .layerEnable(layerEnable),
    .layerAlpha_1(layerAlpha_1),
    .layerStartX_1(layerStartX_1),
    .layerStartY_1(layerStartY_1),
    .layerWidth_1(layerWidth_1),
    .layerStride_1(layerStride_1),
    .layerHeight_1(layerHeight_1),
    .layerScaleFactor_1(layerScaleFactor_1),
    .reserve(reserve),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

design_1_v_mix_0_0_mux_22_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_22_16_1_1_U393(
    .din0(layerAlpha_0),
    .din1(layerAlpha_1_read_reg_787),
    .din2(i_fu_238),
    .dout(tmp_fu_529_p4)
);

design_1_v_mix_0_0_mux_22_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_22_16_1_1_U394(
    .din0(layerStartX_0),
    .din1(layerStartX_1_read_reg_797),
    .din2(i_fu_238),
    .dout(tmp_9_fu_562_p4)
);

design_1_v_mix_0_0_mux_22_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_22_16_1_1_U395(
    .din0(layerStartY_0),
    .din1(layerStartY_1_read_reg_807),
    .din2(i_fu_238),
    .dout(tmp_s_fu_570_p4)
);

design_1_v_mix_0_0_mux_22_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_22_16_1_1_U396(
    .din0(layerWidth_0),
    .din1(layerWidth_1_read_reg_817),
    .din2(i_fu_238),
    .dout(tmp_1_fu_578_p4)
);

design_1_v_mix_0_0_mux_22_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_22_16_1_1_U397(
    .din0(layerHeight_0),
    .din1(layerHeight_1_read_reg_827),
    .din2(i_fu_238),
    .dout(tmp_2_fu_586_p4)
);

design_1_v_mix_0_0_mux_22_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_22_8_1_1_U398(
    .din0(layerScaleFactor_0),
    .din1(layerScaleFactor_1_read_reg_837),
    .din2(i_fu_238),
    .dout(tmp_3_fu_594_p4)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 24 ))
regslice_both_s_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int_regslice),
    .vld_out(s_axis_video_TVALID_int_regslice),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int_regslice),
    .vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 32 ))
regslice_both_s_axis_video1_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TDATA),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_data_V_U_ack_in),
    .data_out(s_axis_video1_TDATA_int_regslice),
    .vld_out(s_axis_video1_TVALID_int_regslice),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_data_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 4 ))
regslice_both_s_axis_video1_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TKEEP),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_keep_V_U_ack_in),
    .data_out(s_axis_video1_TKEEP_int_regslice),
    .vld_out(regslice_both_s_axis_video1_V_keep_V_U_vld_out),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_keep_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 4 ))
regslice_both_s_axis_video1_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TSTRB),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_strb_V_U_ack_in),
    .data_out(s_axis_video1_TSTRB_int_regslice),
    .vld_out(regslice_both_s_axis_video1_V_strb_V_U_vld_out),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_strb_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video1_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TUSER),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_user_V_U_ack_in),
    .data_out(s_axis_video1_TUSER_int_regslice),
    .vld_out(regslice_both_s_axis_video1_V_user_V_U_vld_out),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_user_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video1_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TLAST),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_last_V_U_ack_in),
    .data_out(s_axis_video1_TLAST_int_regslice),
    .vld_out(regslice_both_s_axis_video1_V_last_V_U_vld_out),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_last_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video1_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TID),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_id_V_U_ack_in),
    .data_out(s_axis_video1_TID_int_regslice),
    .vld_out(regslice_both_s_axis_video1_V_id_V_U_vld_out),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_id_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video1_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video1_TDEST),
    .vld_in(s_axis_video1_TVALID),
    .ack_in(regslice_both_s_axis_video1_V_dest_V_U_ack_in),
    .data_out(s_axis_video1_TDEST_int_regslice),
    .vld_out(regslice_both_s_axis_video1_V_dest_V_U_vld_out),
    .ack_out(s_axis_video1_TREADY_int_regslice),
    .apdone_blk(regslice_both_s_axis_video1_V_dest_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 24 ))
regslice_both_m_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TDATA),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TVALID),
    .ack_in(m_axis_video_TREADY_int_regslice),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_m_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TKEEP),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 3 ))
regslice_both_m_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TSTRB),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TUSER),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TLAST),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TID),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk)
);

design_1_v_mix_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TDEST),
    .vld_in(grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_398_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_398_ap_done <= 1'b0;
        end else if ((grp_VMixHlsDataFlowFunction_fu_398_ap_done == 1'b1)) begin
            ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_398_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_398_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_398_ap_ready <= 1'b0;
        end else if ((grp_VMixHlsDataFlowFunction_fu_398_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_398_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_VMixHlsDataFlowFunction_fu_398_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((ap_sync_grp_VMixHlsDataFlowFunction_fu_398_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_VMixHlsDataFlowFunction_fu_398_ap_start_reg <= 1'b1;
        end else if ((grp_VMixHlsDataFlowFunction_fu_398_ap_ready == 1'b1)) begin
            grp_VMixHlsDataFlowFunction_fu_398_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_238 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln2581_fu_517_p2 == 1'd0))) begin
        i_fu_238 <= add_ln2581_fu_523_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        HwReg_background_U_G_reg_760 <= HwReg_background_U_G_fu_493_p1;
        HwReg_background_V_B_reg_755 <= HwReg_background_V_B_fu_489_p1;
        HwReg_background_Y_R_reg_765 <= HwReg_background_Y_R_fu_497_p1;
        HwReg_height_reg_770 <= HwReg_height_fu_501_p1;
        HwReg_layerEnable_reg_749 <= HwReg_layerEnable_fu_485_p1;
        HwReg_width_reg_776 <= HwReg_width_fu_505_p1;
        layerAlpha_1_read_reg_787 <= layerAlpha_1;
        layerHeight_1_read_reg_827 <= layerHeight_1;
        layerScaleFactor_1_read_reg_837 <= layerScaleFactor_1;
        layerStartX_1_read_reg_797 <= layerStartX_1;
        layerStartY_1_read_reg_807 <= layerStartY_1;
        layerWidth_1_read_reg_817 <= layerWidth_1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        HwReg_layerAlpha_1_reg_880 <= HwReg_layerAlpha_1_fu_701_p1;
        HwReg_layerHeight_load_reg_870 <= HwReg_layerHeight_fu_258;
        HwReg_layerScaleFactor_load_reg_875 <= HwReg_layerScaleFactor_fu_262;
        HwReg_layerStartX_load_reg_855 <= HwReg_layerStartX_fu_246;
        HwReg_layerStartY_load_reg_860 <= HwReg_layerStartY_fu_250;
        HwReg_layerWidth_load_reg_865 <= HwReg_layerWidth_fu_254;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln2581_fu_517_p2 == 1'd0))) begin
        HwReg_layerAlpha_fu_242 <= select_ln2583_7_fu_658_p3;
        HwReg_layerEnableFlag_1_reg_374 <= select_ln2583_fu_602_p3;
        HwReg_layerEnableFlag_reg_386 <= select_ln2583_1_fu_610_p3;
        HwReg_layerHeight_fu_258 <= select_ln2583_3_fu_626_p3;
        HwReg_layerScaleFactor_fu_262 <= select_ln2583_2_fu_618_p3;
        HwReg_layerStartX_fu_246 <= select_ln2583_6_fu_650_p3;
        HwReg_layerStartY_fu_250 <= select_ln2583_5_fu_642_p3;
        HwReg_layerWidth_fu_254 <= select_ln2583_4_fu_634_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_VMixHlsDataFlowFunction_fu_398_ap_continue = 1'b1;
    end else begin
        grp_VMixHlsDataFlowFunction_fu_398_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_axis_video1_TREADY_int_regslice = grp_VMixHlsDataFlowFunction_fu_398_s_axis_video1_TREADY;
    end else begin
        s_axis_video1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_axis_video_TREADY_int_regslice = grp_VMixHlsDataFlowFunction_fu_398_s_axis_video_TREADY;
    end else begin
        s_axis_video_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln2581_fu_517_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_background_U_G_fu_493_p1 = background_U_G[7:0];

assign HwReg_background_V_B_fu_489_p1 = background_V_B[7:0];

assign HwReg_background_Y_R_fu_497_p1 = background_Y_R[7:0];

assign HwReg_height_fu_501_p1 = height[9:0];

assign HwReg_layerAlpha_1_fu_701_p1 = HwReg_layerAlpha_fu_242[9:0];

assign HwReg_layerEnable_fu_485_p1 = layerEnable[1:0];

assign HwReg_width_fu_505_p1 = width[9:0];

assign add_ln2581_fu_523_p2 = (i_fu_238 + 2'd1);

assign and_ln2591_fu_551_p2 = (shl_ln2591_fu_545_p2 & HwReg_layerEnable_reg_749);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((ap_sync_grp_VMixHlsDataFlowFunction_fu_398_ap_ready & ap_sync_grp_VMixHlsDataFlowFunction_fu_398_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_VMixHlsDataFlowFunction_fu_398_ap_done = (grp_VMixHlsDataFlowFunction_fu_398_ap_done | ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_398_ap_done);

assign ap_sync_grp_VMixHlsDataFlowFunction_fu_398_ap_ready = (grp_VMixHlsDataFlowFunction_fu_398_ap_ready | ap_sync_reg_grp_VMixHlsDataFlowFunction_fu_398_ap_ready);

assign grp_VMixHlsDataFlowFunction_fu_398_ap_start = grp_VMixHlsDataFlowFunction_fu_398_ap_start_reg;

assign grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TREADY = (m_axis_video_TREADY_int_regslice & ap_CS_fsm_state4);

assign icmp_ln2581_fu_517_p2 = ((i_fu_238 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln2591_fu_556_p2 = ((and_ln2591_fu_551_p2 != 2'd0) ? 1'b1 : 1'b0);

assign layerVideoFormat_address0 = 1'd0;

assign layerVideoFormat_address1 = 1'd0;

assign layerVideoFormat_ce0 = 1'b0;

assign layerVideoFormat_ce1 = 1'b0;

assign layerVideoFormat_d0 = 8'd0;

assign layerVideoFormat_d1 = 8'd0;

assign layerVideoFormat_we0 = 1'b0;

assign layerVideoFormat_we1 = 1'b0;

assign m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out;

assign m_axis_video_TVALID_int_regslice = grp_VMixHlsDataFlowFunction_fu_398_m_axis_video_TVALID;

assign s_axis_video1_TREADY = regslice_both_s_axis_video1_V_data_V_U_ack_in;

assign s_axis_video_TREADY = regslice_both_s_axis_video_V_data_V_U_ack_in;

assign select_ln2583_1_fu_610_p3 = ((trunc_ln2583_fu_537_p1[0:0] == 1'b1) ? icmp_ln2591_fu_556_p2 : HwReg_layerEnableFlag_reg_386);

assign select_ln2583_2_fu_618_p3 = ((trunc_ln2583_fu_537_p1[0:0] == 1'b1) ? tmp_3_fu_594_p4 : HwReg_layerScaleFactor_fu_262);

assign select_ln2583_3_fu_626_p3 = ((trunc_ln2583_fu_537_p1[0:0] == 1'b1) ? tmp_2_fu_586_p4 : HwReg_layerHeight_fu_258);

assign select_ln2583_4_fu_634_p3 = ((trunc_ln2583_fu_537_p1[0:0] == 1'b1) ? tmp_1_fu_578_p4 : HwReg_layerWidth_fu_254);

assign select_ln2583_5_fu_642_p3 = ((trunc_ln2583_fu_537_p1[0:0] == 1'b1) ? tmp_s_fu_570_p4 : HwReg_layerStartY_fu_250);

assign select_ln2583_6_fu_650_p3 = ((trunc_ln2583_fu_537_p1[0:0] == 1'b1) ? tmp_9_fu_562_p4 : HwReg_layerStartX_fu_246);

assign select_ln2583_7_fu_658_p3 = ((trunc_ln2583_fu_537_p1[0:0] == 1'b1) ? tmp_fu_529_p4 : HwReg_layerAlpha_fu_242);

assign select_ln2583_fu_602_p3 = ((trunc_ln2583_fu_537_p1[0:0] == 1'b1) ? HwReg_layerEnableFlag_1_reg_374 : icmp_ln2591_fu_556_p2);

assign shl_ln2591_fu_545_p2 = 2'd1 << zext_ln2591_fu_541_p1;

assign trunc_ln2583_fu_537_p1 = i_fu_238[0:0];

assign zext_ln2591_fu_541_p1 = trunc_ln2583_fu_537_p1;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "design_1_v_mix_0_0_hls_deadlock_detector.vh"
// synthesis translate_on

reg find_kernel_block = 0;
// synthesis translate_off
`include "design_1_v_mix_0_0_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //design_1_v_mix_0_0_v_mix

