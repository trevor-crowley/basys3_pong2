-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_mix_0_0_v_mix_upsample_alpha_false_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    srcLayer1Alpha_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    srcLayer1Alpha_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    srcLayer1Alpha_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    srcLayer1Alpha_empty_n : IN STD_LOGIC;
    srcLayer1Alpha_read : OUT STD_LOGIC;
    HwReg_layerHeight_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    HwReg_layerHeight_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_layerHeight_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_layerHeight_1_empty_n : IN STD_LOGIC;
    HwReg_layerHeight_1_read : OUT STD_LOGIC;
    HwReg_layerWidth_1_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    HwReg_layerWidth_1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_layerWidth_1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    HwReg_layerWidth_1_empty_n : IN STD_LOGIC;
    HwReg_layerWidth_1_read : OUT STD_LOGIC;
    p_read1_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    p_read1_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    p_read1_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    p_read1_empty_n : IN STD_LOGIC;
    p_read1_read : OUT STD_LOGIC;
    srcLayer1Alphax_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    srcLayer1Alphax_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    srcLayer1Alphax_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    srcLayer1Alphax_full_n : IN STD_LOGIC;
    srcLayer1Alphax_write : OUT STD_LOGIC );
end;


architecture behav of design_1_v_mix_0_0_v_mix_upsample_alpha_false_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal HwReg_layerHeight_1_blk_n : STD_LOGIC;
    signal HwReg_layerWidth_1_blk_n : STD_LOGIC;
    signal p_read1_blk_n : STD_LOGIC;
    signal p_read_read_fu_70_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_read_reg_117 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_85_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_reg_121 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_66_fu_89_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_66_reg_126 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start : STD_LOGIC;
    signal grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_done : STD_LOGIC;
    signal grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_idle : STD_LOGIC;
    signal grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_ready : STD_LOGIC;
    signal grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alpha_read : STD_LOGIC;
    signal grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_write : STD_LOGIC;
    signal grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln156_fu_101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal y_fu_54 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_6_fu_106_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component design_1_v_mix_0_0_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        srcLayer1Alpha_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        srcLayer1Alpha_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        srcLayer1Alpha_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        srcLayer1Alpha_empty_n : IN STD_LOGIC;
        srcLayer1Alpha_read : OUT STD_LOGIC;
        srcLayer1Alphax_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        srcLayer1Alphax_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        srcLayer1Alphax_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        srcLayer1Alphax_full_n : IN STD_LOGIC;
        srcLayer1Alphax_write : OUT STD_LOGIC;
        width_cast_i : IN STD_LOGIC_VECTOR (9 downto 0) );
    end component;



begin
    grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76 : component design_1_v_mix_0_0_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start,
        ap_done => grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_done,
        ap_idle => grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_idle,
        ap_ready => grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_ready,
        srcLayer1Alpha_dout => srcLayer1Alpha_dout,
        srcLayer1Alpha_num_data_valid => ap_const_lv5_0,
        srcLayer1Alpha_fifo_cap => ap_const_lv5_0,
        srcLayer1Alpha_empty_n => srcLayer1Alpha_empty_n,
        srcLayer1Alpha_read => grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alpha_read,
        srcLayer1Alphax_din => grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_din,
        srcLayer1Alphax_num_data_valid => ap_const_lv5_0,
        srcLayer1Alphax_fifo_cap => ap_const_lv5_0,
        srcLayer1Alphax_full_n => srcLayer1Alphax_full_n,
        srcLayer1Alphax_write => grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_write,
        width_cast_i => empty_reg_121);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln156_fu_101_p2 = ap_const_lv1_1) or (p_read_reg_117 = ap_const_lv1_0)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln156_fu_101_p2 = ap_const_lv1_0) and (p_read_reg_117 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_ready = ap_const_logic_1)) then 
                    grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    y_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (p_read1_empty_n = ap_const_logic_0) or (ap_const_logic_0 = HwReg_layerWidth_1_empty_n) or (ap_const_logic_0 = HwReg_layerHeight_1_empty_n) or (ap_done_reg = ap_const_logic_1))) and (p_read_read_fu_70_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_fu_54 <= ap_const_lv10_0;
            elsif (((icmp_ln156_fu_101_p2 = ap_const_lv1_0) and (p_read_reg_117 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_fu_54 <= y_6_fu_106_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_66_reg_126 <= empty_66_fu_89_p1;
                empty_reg_121 <= empty_fu_85_p1;
                p_read_reg_117 <= p_read1_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, HwReg_layerHeight_1_empty_n, HwReg_layerWidth_1_empty_n, p_read1_empty_n, p_read_reg_117, grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_done, ap_CS_fsm_state2, icmp_ln156_fu_101_p2, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (p_read1_empty_n = ap_const_logic_0) or (ap_const_logic_0 = HwReg_layerWidth_1_empty_n) or (ap_const_logic_0 = HwReg_layerHeight_1_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln156_fu_101_p2 = ap_const_lv1_1) or (p_read_reg_117 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    HwReg_layerHeight_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_layerHeight_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_layerHeight_1_blk_n <= HwReg_layerHeight_1_empty_n;
        else 
            HwReg_layerHeight_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    HwReg_layerHeight_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_layerHeight_1_empty_n, HwReg_layerWidth_1_empty_n, p_read1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_read1_empty_n = ap_const_logic_0) or (ap_const_logic_0 = HwReg_layerWidth_1_empty_n) or (ap_const_logic_0 = HwReg_layerHeight_1_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_layerHeight_1_read <= ap_const_logic_1;
        else 
            HwReg_layerHeight_1_read <= ap_const_logic_0;
        end if; 
    end process;


    HwReg_layerWidth_1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_layerWidth_1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_layerWidth_1_blk_n <= HwReg_layerWidth_1_empty_n;
        else 
            HwReg_layerWidth_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    HwReg_layerWidth_1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_layerHeight_1_empty_n, HwReg_layerWidth_1_empty_n, p_read1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_read1_empty_n = ap_const_logic_0) or (ap_const_logic_0 = HwReg_layerWidth_1_empty_n) or (ap_const_logic_0 = HwReg_layerHeight_1_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            HwReg_layerWidth_1_read <= ap_const_logic_1;
        else 
            HwReg_layerWidth_1_read <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, HwReg_layerHeight_1_empty_n, HwReg_layerWidth_1_empty_n, p_read1_empty_n)
    begin
        if (((ap_start = ap_const_logic_0) or (p_read1_empty_n = ap_const_logic_0) or (ap_const_logic_0 = HwReg_layerWidth_1_empty_n) or (ap_const_logic_0 = HwReg_layerHeight_1_empty_n) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_done)
    begin
        if ((grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, HwReg_layerHeight_1_empty_n, HwReg_layerWidth_1_empty_n, p_read1_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (p_read1_empty_n = ap_const_logic_0) or (ap_const_logic_0 = HwReg_layerWidth_1_empty_n) or (ap_const_logic_0 = HwReg_layerHeight_1_empty_n) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, p_read_reg_117, ap_CS_fsm_state2, icmp_ln156_fu_101_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln156_fu_101_p2 = ap_const_lv1_1) or (p_read_reg_117 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(p_read_reg_117, ap_CS_fsm_state2, icmp_ln156_fu_101_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln156_fu_101_p2 = ap_const_lv1_1) or (p_read_reg_117 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_66_fu_89_p1 <= HwReg_layerHeight_1_dout(10 - 1 downto 0);
    empty_fu_85_p1 <= HwReg_layerWidth_1_dout(10 - 1 downto 0);
    grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start <= grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start_reg;
    icmp_ln156_fu_101_p2 <= "1" when (y_fu_54 = empty_66_reg_126) else "0";

    p_read1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, p_read1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_read1_blk_n <= p_read1_empty_n;
        else 
            p_read1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    p_read1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, HwReg_layerHeight_1_empty_n, HwReg_layerWidth_1_empty_n, p_read1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (p_read1_empty_n = ap_const_logic_0) or (ap_const_logic_0 = HwReg_layerWidth_1_empty_n) or (ap_const_logic_0 = HwReg_layerHeight_1_empty_n) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            p_read1_read <= ap_const_logic_1;
        else 
            p_read1_read <= ap_const_logic_0;
        end if; 
    end process;

    p_read_read_fu_70_p2 <= p_read1_dout;

    srcLayer1Alpha_read_assign_proc : process(grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alpha_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            srcLayer1Alpha_read <= grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alpha_read;
        else 
            srcLayer1Alpha_read <= ap_const_logic_0;
        end if; 
    end process;

    srcLayer1Alphax_din <= grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_din;

    srcLayer1Alphax_write_assign_proc : process(grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            srcLayer1Alphax_write <= grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_write;
        else 
            srcLayer1Alphax_write <= ap_const_logic_0;
        end if; 
    end process;

    y_6_fu_106_p2 <= std_logic_vector(unsigned(y_fu_54) + unsigned(ap_const_lv10_1));
end behav;
