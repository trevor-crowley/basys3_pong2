// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_mix_0_0_v_mix_core_alpha_true_true_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        outLayer0_dout,
        outLayer0_num_data_valid,
        outLayer0_fifo_cap,
        outLayer0_empty_n,
        outLayer0_read,
        srcLayer1x_dout,
        srcLayer1x_num_data_valid,
        srcLayer1x_fifo_cap,
        srcLayer1x_empty_n,
        srcLayer1x_read,
        srcLayer1Alphax_dout,
        srcLayer1Alphax_num_data_valid,
        srcLayer1Alphax_fifo_cap,
        srcLayer1Alphax_empty_n,
        srcLayer1Alphax_read,
        hwReg_width_dout,
        hwReg_width_num_data_valid,
        hwReg_width_fifo_cap,
        hwReg_width_empty_n,
        hwReg_width_read,
        hwReg_height_dout,
        hwReg_height_num_data_valid,
        hwReg_height_fifo_cap,
        hwReg_height_empty_n,
        hwReg_height_read,
        hwReg_background_Y_R_dout,
        hwReg_background_Y_R_num_data_valid,
        hwReg_background_Y_R_fifo_cap,
        hwReg_background_Y_R_empty_n,
        hwReg_background_Y_R_read,
        hwReg_background_U_G_dout,
        hwReg_background_U_G_num_data_valid,
        hwReg_background_U_G_fifo_cap,
        hwReg_background_U_G_empty_n,
        hwReg_background_U_G_read,
        hwReg_background_V_B_dout,
        hwReg_background_V_B_num_data_valid,
        hwReg_background_V_B_fifo_cap,
        hwReg_background_V_B_empty_n,
        hwReg_background_V_B_read,
        hwReg_layerEnable_dout,
        hwReg_layerEnable_num_data_valid,
        hwReg_layerEnable_fifo_cap,
        hwReg_layerEnable_empty_n,
        hwReg_layerEnable_read,
        hwReg_layerAlpha_1_dout,
        hwReg_layerAlpha_1_num_data_valid,
        hwReg_layerAlpha_1_fifo_cap,
        hwReg_layerAlpha_1_empty_n,
        hwReg_layerAlpha_1_read,
        hwReg_layerStartX_1_dout,
        hwReg_layerStartX_1_num_data_valid,
        hwReg_layerStartX_1_fifo_cap,
        hwReg_layerStartX_1_empty_n,
        hwReg_layerStartX_1_read,
        hwReg_layerStartY_1_dout,
        hwReg_layerStartY_1_num_data_valid,
        hwReg_layerStartY_1_fifo_cap,
        hwReg_layerStartY_1_empty_n,
        hwReg_layerStartY_1_read,
        hwReg_layerWidth_1_dout,
        hwReg_layerWidth_1_num_data_valid,
        hwReg_layerWidth_1_fifo_cap,
        hwReg_layerWidth_1_empty_n,
        hwReg_layerWidth_1_read,
        hwReg_layerHeight_1_dout,
        hwReg_layerHeight_1_num_data_valid,
        hwReg_layerHeight_1_fifo_cap,
        hwReg_layerHeight_1_empty_n,
        hwReg_layerHeight_1_read,
        hwReg_layerScaleFactor_1_dout,
        hwReg_layerScaleFactor_1_num_data_valid,
        hwReg_layerScaleFactor_1_fifo_cap,
        hwReg_layerScaleFactor_1_empty_n,
        hwReg_layerScaleFactor_1_read,
        outLayer1_din,
        outLayer1_num_data_valid,
        outLayer1_fifo_cap,
        outLayer1_full_n,
        outLayer1_write,
        HwReg_width_c41_din,
        HwReg_width_c41_num_data_valid,
        HwReg_width_c41_fifo_cap,
        HwReg_width_c41_full_n,
        HwReg_width_c41_write,
        HwReg_height_c45_din,
        HwReg_height_c45_num_data_valid,
        HwReg_height_c45_fifo_cap,
        HwReg_height_c45_full_n,
        HwReg_height_c45_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] outLayer0_dout;
input  [1:0] outLayer0_num_data_valid;
input  [1:0] outLayer0_fifo_cap;
input   outLayer0_empty_n;
output   outLayer0_read;
input  [23:0] srcLayer1x_dout;
input  [1:0] srcLayer1x_num_data_valid;
input  [1:0] srcLayer1x_fifo_cap;
input   srcLayer1x_empty_n;
output   srcLayer1x_read;
input  [7:0] srcLayer1Alphax_dout;
input  [4:0] srcLayer1Alphax_num_data_valid;
input  [4:0] srcLayer1Alphax_fifo_cap;
input   srcLayer1Alphax_empty_n;
output   srcLayer1Alphax_read;
input  [9:0] hwReg_width_dout;
input  [3:0] hwReg_width_num_data_valid;
input  [3:0] hwReg_width_fifo_cap;
input   hwReg_width_empty_n;
output   hwReg_width_read;
input  [9:0] hwReg_height_dout;
input  [3:0] hwReg_height_num_data_valid;
input  [3:0] hwReg_height_fifo_cap;
input   hwReg_height_empty_n;
output   hwReg_height_read;
input  [7:0] hwReg_background_Y_R_dout;
input  [3:0] hwReg_background_Y_R_num_data_valid;
input  [3:0] hwReg_background_Y_R_fifo_cap;
input   hwReg_background_Y_R_empty_n;
output   hwReg_background_Y_R_read;
input  [7:0] hwReg_background_U_G_dout;
input  [3:0] hwReg_background_U_G_num_data_valid;
input  [3:0] hwReg_background_U_G_fifo_cap;
input   hwReg_background_U_G_empty_n;
output   hwReg_background_U_G_read;
input  [7:0] hwReg_background_V_B_dout;
input  [3:0] hwReg_background_V_B_num_data_valid;
input  [3:0] hwReg_background_V_B_fifo_cap;
input   hwReg_background_V_B_empty_n;
output   hwReg_background_V_B_read;
input  [1:0] hwReg_layerEnable_dout;
input  [3:0] hwReg_layerEnable_num_data_valid;
input  [3:0] hwReg_layerEnable_fifo_cap;
input   hwReg_layerEnable_empty_n;
output   hwReg_layerEnable_read;
input  [9:0] hwReg_layerAlpha_1_dout;
input  [3:0] hwReg_layerAlpha_1_num_data_valid;
input  [3:0] hwReg_layerAlpha_1_fifo_cap;
input   hwReg_layerAlpha_1_empty_n;
output   hwReg_layerAlpha_1_read;
input  [15:0] hwReg_layerStartX_1_dout;
input  [3:0] hwReg_layerStartX_1_num_data_valid;
input  [3:0] hwReg_layerStartX_1_fifo_cap;
input   hwReg_layerStartX_1_empty_n;
output   hwReg_layerStartX_1_read;
input  [15:0] hwReg_layerStartY_1_dout;
input  [3:0] hwReg_layerStartY_1_num_data_valid;
input  [3:0] hwReg_layerStartY_1_fifo_cap;
input   hwReg_layerStartY_1_empty_n;
output   hwReg_layerStartY_1_read;
input  [9:0] hwReg_layerWidth_1_dout;
input  [1:0] hwReg_layerWidth_1_num_data_valid;
input  [1:0] hwReg_layerWidth_1_fifo_cap;
input   hwReg_layerWidth_1_empty_n;
output   hwReg_layerWidth_1_read;
input  [9:0] hwReg_layerHeight_1_dout;
input  [1:0] hwReg_layerHeight_1_num_data_valid;
input  [1:0] hwReg_layerHeight_1_fifo_cap;
input   hwReg_layerHeight_1_empty_n;
output   hwReg_layerHeight_1_read;
input  [7:0] hwReg_layerScaleFactor_1_dout;
input  [3:0] hwReg_layerScaleFactor_1_num_data_valid;
input  [3:0] hwReg_layerScaleFactor_1_fifo_cap;
input   hwReg_layerScaleFactor_1_empty_n;
output   hwReg_layerScaleFactor_1_read;
output  [23:0] outLayer1_din;
input  [1:0] outLayer1_num_data_valid;
input  [1:0] outLayer1_fifo_cap;
input   outLayer1_full_n;
output   outLayer1_write;
output  [9:0] HwReg_width_c41_din;
input  [1:0] HwReg_width_c41_num_data_valid;
input  [1:0] HwReg_width_c41_fifo_cap;
input   HwReg_width_c41_full_n;
output   HwReg_width_c41_write;
output  [9:0] HwReg_height_c45_din;
input  [1:0] HwReg_height_c45_num_data_valid;
input  [1:0] HwReg_height_c45_fifo_cap;
input   HwReg_height_c45_full_n;
output   HwReg_height_c45_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg outLayer0_read;
reg srcLayer1x_read;
reg srcLayer1Alphax_read;
reg hwReg_width_read;
reg hwReg_height_read;
reg hwReg_background_Y_R_read;
reg hwReg_background_U_G_read;
reg hwReg_background_V_B_read;
reg hwReg_layerEnable_read;
reg hwReg_layerAlpha_1_read;
reg hwReg_layerStartX_1_read;
reg hwReg_layerStartY_1_read;
reg hwReg_layerWidth_1_read;
reg hwReg_layerHeight_1_read;
reg hwReg_layerScaleFactor_1_read;
reg outLayer1_write;
reg HwReg_width_c41_write;
reg HwReg_height_c45_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    hwReg_width_blk_n;
reg    hwReg_height_blk_n;
reg    hwReg_background_Y_R_blk_n;
reg    hwReg_background_U_G_blk_n;
reg    hwReg_background_V_B_blk_n;
reg    hwReg_layerEnable_blk_n;
reg    hwReg_layerAlpha_1_blk_n;
reg    hwReg_layerStartX_1_blk_n;
reg    hwReg_layerStartY_1_blk_n;
reg    hwReg_layerWidth_1_blk_n;
reg    hwReg_layerHeight_1_blk_n;
reg    hwReg_layerScaleFactor_1_blk_n;
reg    HwReg_width_c41_blk_n;
reg    HwReg_height_c45_blk_n;
reg   [7:0] hwReg_layerScaleFactor_1_read_reg_374;
reg   [9:0] hwReg_layerHeight_1_read_reg_379;
reg   [9:0] hwReg_layerWidth_1_read_reg_384;
reg   [15:0] layerStartY_reg_389;
reg   [15:0] layerStartX_reg_395;
reg   [7:0] bkgpix_val_V_2_reg_401;
reg   [7:0] bkgpix_val_V_1_reg_406;
reg   [7:0] bkgpix_val_V_reg_411;
reg   [9:0] height_reg_416;
reg   [9:0] width_reg_421;
wire   [0:0] empty_fu_221_p1;
reg   [0:0] empty_reg_426;
reg   [0:0] tmp_reg_431;
wire   [8:0] trunc_ln246_fu_259_p1;
reg   [8:0] trunc_ln246_reg_436;
wire    ap_CS_fsm_state2;
wire   [16:0] add64_fu_278_p2;
reg   [16:0] add64_reg_441;
wire   [16:0] add75_fu_291_p2;
reg   [16:0] add75_reg_446;
wire   [0:0] rev_fu_297_p2;
reg   [0:0] rev_reg_451;
wire   [0:0] and_ln285_fu_340_p2;
reg   [0:0] and_ln285_reg_459;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln269_fu_313_p2;
wire    grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_start;
wire    grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_done;
wire    grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_idle;
wire    grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_ready;
wire    grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_outLayer0_read;
wire    grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_srcLayer1x_read;
wire    grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_srcLayer1Alphax_read;
wire   [23:0] grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_outLayer1_din;
wire    grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_outLayer1_write;
wire   [7:0] grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_2_0_0_026_out_o;
wire    grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_2_0_0_026_out_o_ap_vld;
wire   [7:0] grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_1_0_0_024_out_o;
wire    grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_1_0_0_024_out_o_ap_vld;
wire   [7:0] grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_0_0_0_022_out_o;
wire    grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_0_0_0_022_out_o_ap_vld;
wire   [9:0] grp_reg_unsigned_short_s_fu_215_ap_return;
reg    grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_start_reg;
wire    ap_CS_fsm_state4;
reg   [7:0] p_0_2_0_0_027_lcssa44_fu_98;
reg   [7:0] p_0_1_0_0_025_lcssa41_fu_94;
reg   [7:0] p_0_0_0_0_023_lcssa38_fu_90;
reg   [9:0] y_fu_86;
wire   [9:0] y_12_fu_318_p2;
reg    ap_block_state1;
wire   [31:0] zext_ln251_fu_238_p1;
wire   [31:0] zext_ln251_1_fu_241_p1;
wire   [31:0] zext_ln252_fu_250_p1;
wire   [31:0] shl_ln251_fu_244_p2;
wire   [31:0] shl_ln252_fu_253_p2;
wire   [15:0] layerHeight_fu_263_p1;
wire   [16:0] layerHeight_cast_fu_274_p1;
wire   [16:0] layerStartY_cast_fu_271_p1;
wire   [15:0] layerWidth_fu_267_p1;
wire   [16:0] layerWidth_cast_fu_287_p1;
wire   [16:0] layerStartX_cast_fu_284_p1;
wire   [15:0] zext_ln269_fu_305_p1;
wire   [0:0] ult_fu_324_p2;
wire   [16:0] zext_ln269_1_fu_309_p1;
wire   [0:0] notrhs_fu_335_p2;
wire   [0:0] rev12_fu_329_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_start_reg = 1'b0;
end

design_1_v_mix_0_0_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3 grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_start),
    .ap_done(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_done),
    .ap_idle(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_idle),
    .ap_ready(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_ready),
    .outLayer0_dout(outLayer0_dout),
    .outLayer0_num_data_valid(2'd0),
    .outLayer0_fifo_cap(2'd0),
    .outLayer0_empty_n(outLayer0_empty_n),
    .outLayer0_read(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_outLayer0_read),
    .srcLayer1x_dout(srcLayer1x_dout),
    .srcLayer1x_num_data_valid(2'd0),
    .srcLayer1x_fifo_cap(2'd0),
    .srcLayer1x_empty_n(srcLayer1x_empty_n),
    .srcLayer1x_read(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_srcLayer1x_read),
    .srcLayer1Alphax_dout(srcLayer1Alphax_dout),
    .srcLayer1Alphax_num_data_valid(5'd0),
    .srcLayer1Alphax_fifo_cap(5'd0),
    .srcLayer1Alphax_empty_n(srcLayer1Alphax_empty_n),
    .srcLayer1Alphax_read(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_srcLayer1Alphax_read),
    .outLayer1_din(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_outLayer1_din),
    .outLayer1_num_data_valid(2'd0),
    .outLayer1_fifo_cap(2'd0),
    .outLayer1_full_n(outLayer1_full_n),
    .outLayer1_write(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_outLayer1_write),
    .width(width_reg_421),
    .zext_ln301(trunc_ln246_reg_436),
    .bkgpix_val_V_2(bkgpix_val_V_2_reg_401),
    .bkgpix_val_V_1(bkgpix_val_V_1_reg_406),
    .bkgpix_val_V(bkgpix_val_V_reg_411),
    .layerStartX(layerStartX_reg_395),
    .add75(add75_reg_446),
    .and_ln285(and_ln285_reg_459),
    .tobool83_not(rev_reg_451),
    .hwReg_layerEnable_load_cast(empty_reg_426),
    .p_0_2_0_0_026_out_i(p_0_2_0_0_027_lcssa44_fu_98),
    .p_0_2_0_0_026_out_o(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_2_0_0_026_out_o),
    .p_0_2_0_0_026_out_o_ap_vld(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_2_0_0_026_out_o_ap_vld),
    .p_0_1_0_0_024_out_i(p_0_1_0_0_025_lcssa41_fu_94),
    .p_0_1_0_0_024_out_o(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_1_0_0_024_out_o),
    .p_0_1_0_0_024_out_o_ap_vld(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_1_0_0_024_out_o_ap_vld),
    .p_0_0_0_0_022_out_i(p_0_0_0_0_023_lcssa38_fu_90),
    .p_0_0_0_0_022_out_o(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_0_0_0_022_out_o),
    .p_0_0_0_0_022_out_o_ap_vld(grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_0_0_0_022_out_o_ap_vld)
);

design_1_v_mix_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_215(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .d(hwReg_layerAlpha_1_dout),
    .ap_return(grp_reg_unsigned_short_s_fu_215_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln269_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln269_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_start_reg <= 1'b1;
        end else if ((grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_ready == 1'b1)) begin
            grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_86 <= 10'd0;
    end else if (((icmp_ln269_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        y_fu_86 <= y_12_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add64_reg_441 <= add64_fu_278_p2;
        add75_reg_446 <= add75_fu_291_p2;
        rev_reg_451 <= rev_fu_297_p2;
        trunc_ln246_reg_436 <= trunc_ln246_fu_259_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln269_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        and_ln285_reg_459 <= and_ln285_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bkgpix_val_V_1_reg_406 <= hwReg_background_U_G_dout;
        bkgpix_val_V_2_reg_401 <= hwReg_background_V_B_dout;
        bkgpix_val_V_reg_411 <= hwReg_background_Y_R_dout;
        empty_reg_426 <= empty_fu_221_p1;
        height_reg_416 <= hwReg_height_dout;
        hwReg_layerHeight_1_read_reg_379 <= hwReg_layerHeight_1_dout;
        hwReg_layerScaleFactor_1_read_reg_374 <= hwReg_layerScaleFactor_1_dout;
        hwReg_layerWidth_1_read_reg_384 <= hwReg_layerWidth_1_dout;
        layerStartX_reg_395 <= hwReg_layerStartX_1_dout;
        layerStartY_reg_389 <= hwReg_layerStartY_1_dout;
        tmp_reg_431 <= hwReg_layerEnable_dout[32'd1];
        width_reg_421 <= hwReg_width_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_0_0_0_022_out_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0_0_0_0_023_lcssa38_fu_90 <= grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_0_0_0_022_out_o;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_1_0_0_024_out_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0_1_0_0_025_lcssa41_fu_94 <= grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_1_0_0_024_out_o;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_2_0_0_026_out_o_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        p_0_2_0_0_027_lcssa44_fu_98 <= grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_p_0_2_0_0_026_out_o;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_height_c45_blk_n = HwReg_height_c45_full_n;
    end else begin
        HwReg_height_c45_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_height_c45_write = 1'b1;
    end else begin
        HwReg_height_c45_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_width_c41_blk_n = HwReg_width_c41_full_n;
    end else begin
        HwReg_width_c41_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_width_c41_write = 1'b1;
    end else begin
        HwReg_width_c41_write = 1'b0;
    end
end

always @ (*) begin
    if (((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln269_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_background_U_G_blk_n = hwReg_background_U_G_empty_n;
    end else begin
        hwReg_background_U_G_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_background_U_G_read = 1'b1;
    end else begin
        hwReg_background_U_G_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_background_V_B_blk_n = hwReg_background_V_B_empty_n;
    end else begin
        hwReg_background_V_B_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_background_V_B_read = 1'b1;
    end else begin
        hwReg_background_V_B_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_background_Y_R_blk_n = hwReg_background_Y_R_empty_n;
    end else begin
        hwReg_background_Y_R_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_background_Y_R_read = 1'b1;
    end else begin
        hwReg_background_Y_R_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_height_blk_n = hwReg_height_empty_n;
    end else begin
        hwReg_height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_height_read = 1'b1;
    end else begin
        hwReg_height_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerAlpha_1_blk_n = hwReg_layerAlpha_1_empty_n;
    end else begin
        hwReg_layerAlpha_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerAlpha_1_read = 1'b1;
    end else begin
        hwReg_layerAlpha_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerEnable_blk_n = hwReg_layerEnable_empty_n;
    end else begin
        hwReg_layerEnable_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerEnable_read = 1'b1;
    end else begin
        hwReg_layerEnable_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerHeight_1_blk_n = hwReg_layerHeight_1_empty_n;
    end else begin
        hwReg_layerHeight_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerHeight_1_read = 1'b1;
    end else begin
        hwReg_layerHeight_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerScaleFactor_1_blk_n = hwReg_layerScaleFactor_1_empty_n;
    end else begin
        hwReg_layerScaleFactor_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerScaleFactor_1_read = 1'b1;
    end else begin
        hwReg_layerScaleFactor_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerStartX_1_blk_n = hwReg_layerStartX_1_empty_n;
    end else begin
        hwReg_layerStartX_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerStartX_1_read = 1'b1;
    end else begin
        hwReg_layerStartX_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerStartY_1_blk_n = hwReg_layerStartY_1_empty_n;
    end else begin
        hwReg_layerStartY_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerStartY_1_read = 1'b1;
    end else begin
        hwReg_layerStartY_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerWidth_1_blk_n = hwReg_layerWidth_1_empty_n;
    end else begin
        hwReg_layerWidth_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_layerWidth_1_read = 1'b1;
    end else begin
        hwReg_layerWidth_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_width_blk_n = hwReg_width_empty_n;
    end else begin
        hwReg_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        hwReg_width_read = 1'b1;
    end else begin
        hwReg_width_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln269_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outLayer0_read = grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_outLayer0_read;
    end else begin
        outLayer0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outLayer1_write = grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_outLayer1_write;
    end else begin
        outLayer1_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        srcLayer1Alphax_read = grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_srcLayer1Alphax_read;
    end else begin
        srcLayer1Alphax_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        srcLayer1x_read = grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_srcLayer1x_read;
    end else begin
        srcLayer1x_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln269_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_height_c45_din = hwReg_height_dout;

assign HwReg_width_c41_din = hwReg_width_dout;

assign add64_fu_278_p2 = (layerHeight_cast_fu_274_p1 + layerStartY_cast_fu_271_p1);

assign add75_fu_291_p2 = (layerWidth_cast_fu_287_p1 + layerStartX_cast_fu_284_p1);

assign and_ln285_fu_340_p2 = (rev12_fu_329_p2 & notrhs_fu_335_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((hwReg_layerAlpha_1_empty_n == 1'b0) | (hwReg_layerEnable_empty_n == 1'b0) | (hwReg_background_V_B_empty_n == 1'b0) | (hwReg_background_U_G_empty_n == 1'b0) | (hwReg_background_Y_R_empty_n == 1'b0) | (hwReg_height_empty_n == 1'b0) | (hwReg_width_empty_n == 1'b0) | (1'b0 == HwReg_height_c45_full_n) | (1'b0 == HwReg_width_c41_full_n) | (ap_done_reg == 1'b1) | (hwReg_layerScaleFactor_1_empty_n == 1'b0) | (hwReg_layerHeight_1_empty_n == 1'b0) | (hwReg_layerWidth_1_empty_n == 1'b0) | (hwReg_layerStartY_1_empty_n == 1'b0) | (real_start == 1'b0) | (hwReg_layerStartX_1_empty_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign empty_fu_221_p1 = hwReg_layerEnable_dout[0:0];

assign grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_start = grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_ap_start_reg;

assign icmp_ln269_fu_313_p2 = ((y_fu_86 == height_reg_416) ? 1'b1 : 1'b0);

assign layerHeight_cast_fu_274_p1 = layerHeight_fu_263_p1;

assign layerHeight_fu_263_p1 = shl_ln251_fu_244_p2[15:0];

assign layerStartX_cast_fu_284_p1 = layerStartX_reg_395;

assign layerStartY_cast_fu_271_p1 = layerStartY_reg_389;

assign layerWidth_cast_fu_287_p1 = layerWidth_fu_267_p1;

assign layerWidth_fu_267_p1 = shl_ln252_fu_253_p2[15:0];

assign notrhs_fu_335_p2 = ((zext_ln269_1_fu_309_p1 < add64_reg_441) ? 1'b1 : 1'b0);

assign outLayer1_din = grp_v_mix_core_alpha_true_true_Pipeline_VITIS_LOOP_271_3_fu_190_outLayer1_din;

assign rev12_fu_329_p2 = (ult_fu_324_p2 ^ 1'd1);

assign rev_fu_297_p2 = (tmp_reg_431 ^ 1'd1);

assign shl_ln251_fu_244_p2 = zext_ln251_fu_238_p1 << zext_ln251_1_fu_241_p1;

assign shl_ln252_fu_253_p2 = zext_ln252_fu_250_p1 << zext_ln251_1_fu_241_p1;

assign start_out = real_start;

assign trunc_ln246_fu_259_p1 = grp_reg_unsigned_short_s_fu_215_ap_return[8:0];

assign ult_fu_324_p2 = ((zext_ln269_fu_305_p1 < layerStartY_reg_389) ? 1'b1 : 1'b0);

assign y_12_fu_318_p2 = (y_fu_86 + 10'd1);

assign zext_ln251_1_fu_241_p1 = hwReg_layerScaleFactor_1_read_reg_374;

assign zext_ln251_fu_238_p1 = hwReg_layerHeight_1_read_reg_379;

assign zext_ln252_fu_250_p1 = hwReg_layerWidth_1_read_reg_384;

assign zext_ln269_1_fu_309_p1 = y_fu_86;

assign zext_ln269_fu_305_p1 = y_fu_86;

endmodule //design_1_v_mix_0_0_v_mix_core_alpha_true_true_s
