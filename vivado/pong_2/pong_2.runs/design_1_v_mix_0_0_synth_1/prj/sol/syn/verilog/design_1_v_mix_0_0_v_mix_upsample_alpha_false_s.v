// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_mix_0_0_v_mix_upsample_alpha_false_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        srcLayer1Alpha_dout,
        srcLayer1Alpha_num_data_valid,
        srcLayer1Alpha_fifo_cap,
        srcLayer1Alpha_empty_n,
        srcLayer1Alpha_read,
        HwReg_layerHeight_1_dout,
        HwReg_layerHeight_1_num_data_valid,
        HwReg_layerHeight_1_fifo_cap,
        HwReg_layerHeight_1_empty_n,
        HwReg_layerHeight_1_read,
        HwReg_layerWidth_1_dout,
        HwReg_layerWidth_1_num_data_valid,
        HwReg_layerWidth_1_fifo_cap,
        HwReg_layerWidth_1_empty_n,
        HwReg_layerWidth_1_read,
        p_read1_dout,
        p_read1_num_data_valid,
        p_read1_fifo_cap,
        p_read1_empty_n,
        p_read1_read,
        srcLayer1Alphax_din,
        srcLayer1Alphax_num_data_valid,
        srcLayer1Alphax_fifo_cap,
        srcLayer1Alphax_full_n,
        srcLayer1Alphax_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] srcLayer1Alpha_dout;
input  [4:0] srcLayer1Alpha_num_data_valid;
input  [4:0] srcLayer1Alpha_fifo_cap;
input   srcLayer1Alpha_empty_n;
output   srcLayer1Alpha_read;
input  [15:0] HwReg_layerHeight_1_dout;
input  [1:0] HwReg_layerHeight_1_num_data_valid;
input  [1:0] HwReg_layerHeight_1_fifo_cap;
input   HwReg_layerHeight_1_empty_n;
output   HwReg_layerHeight_1_read;
input  [15:0] HwReg_layerWidth_1_dout;
input  [1:0] HwReg_layerWidth_1_num_data_valid;
input  [1:0] HwReg_layerWidth_1_fifo_cap;
input   HwReg_layerWidth_1_empty_n;
output   HwReg_layerWidth_1_read;
input  [0:0] p_read1_dout;
input  [1:0] p_read1_num_data_valid;
input  [1:0] p_read1_fifo_cap;
input   p_read1_empty_n;
output   p_read1_read;
output  [7:0] srcLayer1Alphax_din;
input  [4:0] srcLayer1Alphax_num_data_valid;
input  [4:0] srcLayer1Alphax_fifo_cap;
input   srcLayer1Alphax_full_n;
output   srcLayer1Alphax_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg srcLayer1Alpha_read;
reg HwReg_layerHeight_1_read;
reg HwReg_layerWidth_1_read;
reg p_read1_read;
reg srcLayer1Alphax_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    HwReg_layerHeight_1_blk_n;
reg    HwReg_layerWidth_1_blk_n;
reg    p_read1_blk_n;
wire   [0:0] p_read_read_fu_70_p2;
reg   [0:0] p_read_reg_117;
wire   [9:0] empty_fu_85_p1;
reg   [9:0] empty_reg_121;
wire   [9:0] empty_66_fu_89_p1;
reg   [9:0] empty_66_reg_126;
wire    grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start;
wire    grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_done;
wire    grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_idle;
wire    grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_ready;
wire    grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alpha_read;
wire   [7:0] grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_din;
wire    grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_write;
reg    grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln156_fu_101_p2;
wire    ap_CS_fsm_state3;
reg   [9:0] y_fu_54;
wire   [9:0] y_6_fu_106_p2;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start_reg = 1'b0;
end

design_1_v_mix_0_0_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2 grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start),
    .ap_done(grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_done),
    .ap_idle(grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_idle),
    .ap_ready(grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_ready),
    .srcLayer1Alpha_dout(srcLayer1Alpha_dout),
    .srcLayer1Alpha_num_data_valid(5'd0),
    .srcLayer1Alpha_fifo_cap(5'd0),
    .srcLayer1Alpha_empty_n(srcLayer1Alpha_empty_n),
    .srcLayer1Alpha_read(grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alpha_read),
    .srcLayer1Alphax_din(grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_din),
    .srcLayer1Alphax_num_data_valid(5'd0),
    .srcLayer1Alphax_fifo_cap(5'd0),
    .srcLayer1Alphax_full_n(srcLayer1Alphax_full_n),
    .srcLayer1Alphax_write(grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_write),
    .width_cast_i(empty_reg_121)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln156_fu_101_p2 == 1'd1) | (p_read_reg_117 == 1'd0)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln156_fu_101_p2 == 1'd0) & (p_read_reg_117 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start_reg <= 1'b1;
        end else if ((grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_ready == 1'b1)) begin
            grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (p_read1_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth_1_empty_n) | (1'b0 == HwReg_layerHeight_1_empty_n) | (ap_done_reg == 1'b1)) & (p_read_read_fu_70_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_54 <= 10'd0;
    end else if (((icmp_ln156_fu_101_p2 == 1'd0) & (p_read_reg_117 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        y_fu_54 <= y_6_fu_106_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_66_reg_126 <= empty_66_fu_89_p1;
        empty_reg_121 <= empty_fu_85_p1;
        p_read_reg_117 <= p_read1_dout;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight_1_blk_n = HwReg_layerHeight_1_empty_n;
    end else begin
        HwReg_layerHeight_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth_1_empty_n) | (1'b0 == HwReg_layerHeight_1_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerHeight_1_read = 1'b1;
    end else begin
        HwReg_layerHeight_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth_1_blk_n = HwReg_layerWidth_1_empty_n;
    end else begin
        HwReg_layerWidth_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth_1_empty_n) | (1'b0 == HwReg_layerHeight_1_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_layerWidth_1_read = 1'b1;
    end else begin
        HwReg_layerWidth_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (p_read1_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth_1_empty_n) | (1'b0 == HwReg_layerHeight_1_empty_n) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln156_fu_101_p2 == 1'd1) | (p_read_reg_117 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln156_fu_101_p2 == 1'd1) | (p_read_reg_117 == 1'd0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_blk_n = p_read1_empty_n;
    end else begin
        p_read1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (p_read1_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth_1_empty_n) | (1'b0 == HwReg_layerHeight_1_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_read1_read = 1'b1;
    end else begin
        p_read1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        srcLayer1Alpha_read = grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alpha_read;
    end else begin
        srcLayer1Alpha_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        srcLayer1Alphax_write = grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_write;
    end else begin
        srcLayer1Alphax_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (p_read1_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth_1_empty_n) | (1'b0 == HwReg_layerHeight_1_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & ((icmp_ln156_fu_101_p2 == 1'd1) | (p_read_reg_117 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (p_read1_empty_n == 1'b0) | (1'b0 == HwReg_layerWidth_1_empty_n) | (1'b0 == HwReg_layerHeight_1_empty_n) | (ap_done_reg == 1'b1));
end

assign empty_66_fu_89_p1 = HwReg_layerHeight_1_dout[9:0];

assign empty_fu_85_p1 = HwReg_layerWidth_1_dout[9:0];

assign grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start = grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_ap_start_reg;

assign icmp_ln156_fu_101_p2 = ((y_fu_54 == empty_66_reg_126) ? 1'b1 : 1'b0);

assign p_read_read_fu_70_p2 = p_read1_dout;

assign srcLayer1Alphax_din = grp_v_mix_upsample_alpha_false_Pipeline_VITIS_LOOP_158_2_fu_76_srcLayer1Alphax_din;

assign y_6_fu_106_p2 = (y_fu_54 + 10'd1);

endmodule //design_1_v_mix_0_0_v_mix_upsample_alpha_false_s
