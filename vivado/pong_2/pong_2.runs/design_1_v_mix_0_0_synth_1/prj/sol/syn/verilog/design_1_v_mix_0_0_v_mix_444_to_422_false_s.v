// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_mix_0_0_v_mix_444_to_422_false_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        outYuv_dout,
        outYuv_num_data_valid,
        outYuv_fifo_cap,
        outYuv_empty_n,
        outYuv_read,
        height_dout,
        height_num_data_valid,
        height_fifo_cap,
        height_empty_n,
        height_read,
        width_dout,
        width_num_data_valid,
        width_fifo_cap,
        width_empty_n,
        width_read,
        out422_din,
        out422_num_data_valid,
        out422_fifo_cap,
        out422_full_n,
        out422_write,
        HwReg_width_c39_din,
        HwReg_width_c39_num_data_valid,
        HwReg_width_c39_fifo_cap,
        HwReg_width_c39_full_n,
        HwReg_width_c39_write,
        HwReg_height_c43_din,
        HwReg_height_c43_num_data_valid,
        HwReg_height_c43_fifo_cap,
        HwReg_height_c43_full_n,
        HwReg_height_c43_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [23:0] outYuv_dout;
input  [1:0] outYuv_num_data_valid;
input  [1:0] outYuv_fifo_cap;
input   outYuv_empty_n;
output   outYuv_read;
input  [9:0] height_dout;
input  [1:0] height_num_data_valid;
input  [1:0] height_fifo_cap;
input   height_empty_n;
output   height_read;
input  [9:0] width_dout;
input  [1:0] width_num_data_valid;
input  [1:0] width_fifo_cap;
input   width_empty_n;
output   width_read;
output  [23:0] out422_din;
input  [1:0] out422_num_data_valid;
input  [1:0] out422_fifo_cap;
input   out422_full_n;
output   out422_write;
output  [9:0] HwReg_width_c39_din;
input  [1:0] HwReg_width_c39_num_data_valid;
input  [1:0] HwReg_width_c39_fifo_cap;
input   HwReg_width_c39_full_n;
output   HwReg_width_c39_write;
output  [9:0] HwReg_height_c43_din;
input  [1:0] HwReg_height_c43_num_data_valid;
input  [1:0] HwReg_height_c43_fifo_cap;
input   HwReg_height_c43_full_n;
output   HwReg_height_c43_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg outYuv_read;
reg height_read;
reg width_read;
reg out422_write;
reg HwReg_width_c39_write;
reg HwReg_height_c43_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    height_blk_n;
reg    width_blk_n;
reg    HwReg_width_c39_blk_n;
reg    HwReg_height_c43_blk_n;
reg   [9:0] height_read_reg_128;
reg   [9:0] width_read_reg_133;
wire    grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_start;
wire    grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_done;
wire    grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_idle;
wire    grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_ready;
wire    grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_outYuv_read;
wire   [23:0] grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_out422_din;
wire    grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_out422_write;
reg    grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_start_reg;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln671_fu_105_p2;
wire    ap_CS_fsm_state3;
reg   [9:0] y_fu_56;
wire   [9:0] y_14_fu_110_p2;
reg    ap_block_state1;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_start_reg = 1'b0;
end

design_1_v_mix_0_0_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2 grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_start),
    .ap_done(grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_done),
    .ap_idle(grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_idle),
    .ap_ready(grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_ready),
    .outYuv_dout(outYuv_dout),
    .outYuv_num_data_valid(2'd0),
    .outYuv_fifo_cap(2'd0),
    .outYuv_empty_n(outYuv_empty_n),
    .outYuv_read(grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_outYuv_read),
    .out422_din(grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_out422_din),
    .out422_num_data_valid(2'd0),
    .out422_fifo_cap(2'd0),
    .out422_full_n(out422_full_n),
    .out422_write(grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_out422_write),
    .width_load(width_read_reg_133)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_105_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_105_p2 == 1'd0))) begin
            grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_start_reg <= 1'b1;
        end else if ((grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_ready == 1'b1)) begin
            grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (1'b0 == HwReg_height_c43_full_n) | (1'b0 == HwReg_width_c39_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        y_fu_56 <= 10'd0;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_105_p2 == 1'd0))) begin
        y_fu_56 <= y_14_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        height_read_reg_128 <= height_dout;
        width_read_reg_133 <= width_dout;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_height_c43_blk_n = HwReg_height_c43_full_n;
    end else begin
        HwReg_height_c43_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (1'b0 == HwReg_height_c43_full_n) | (1'b0 == HwReg_width_c39_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_height_c43_write = 1'b1;
    end else begin
        HwReg_height_c43_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_width_c39_blk_n = HwReg_width_c39_full_n;
    end else begin
        HwReg_width_c39_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (1'b0 == HwReg_height_c43_full_n) | (1'b0 == HwReg_width_c39_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_width_c39_write = 1'b1;
    end else begin
        HwReg_width_c39_write = 1'b0;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (1'b0 == HwReg_height_c43_full_n) | (1'b0 == HwReg_width_c39_full_n) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_105_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_blk_n = height_empty_n;
    end else begin
        height_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (1'b0 == HwReg_height_c43_full_n) | (1'b0 == HwReg_width_c39_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        height_read = 1'b1;
    end else begin
        height_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_105_p2 == 1'd1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        out422_write = grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_out422_write;
    end else begin
        out422_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outYuv_read = grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_outYuv_read;
    end else begin
        outYuv_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_blk_n = width_empty_n;
    end else begin
        width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (1'b0 == HwReg_height_c43_full_n) | (1'b0 == HwReg_width_c39_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        width_read = 1'b1;
    end else begin
        width_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (1'b0 == HwReg_height_c43_full_n) | (1'b0 == HwReg_width_c39_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln671_fu_105_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_height_c43_din = height_dout;

assign HwReg_width_c39_din = width_dout;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (width_empty_n == 1'b0) | (height_empty_n == 1'b0) | (1'b0 == HwReg_height_c43_full_n) | (1'b0 == HwReg_width_c39_full_n) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_start = grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_ap_start_reg;

assign icmp_ln671_fu_105_p2 = ((y_fu_56 == height_read_reg_128) ? 1'b1 : 1'b0);

assign out422_din = grp_v_mix_444_to_422_false_Pipeline_VITIS_LOOP_673_2_fu_88_out422_din;

assign start_out = real_start;

assign y_14_fu_110_p2 = (y_fu_56 + 10'd1);

endmodule //design_1_v_mix_0_0_v_mix_444_to_422_false_s
