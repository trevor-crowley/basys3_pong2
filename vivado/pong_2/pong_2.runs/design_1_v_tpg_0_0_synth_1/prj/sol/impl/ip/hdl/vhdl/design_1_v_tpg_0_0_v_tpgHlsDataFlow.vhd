-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_tpg_0_0_v_tpgHlsDataFlow is
port (
    height : IN STD_LOGIC_VECTOR (15 downto 0);
    width : IN STD_LOGIC_VECTOR (15 downto 0);
    field_id : IN STD_LOGIC_VECTOR (15 downto 0);
    fid_in : IN STD_LOGIC_VECTOR (0 downto 0);
    bckgndId : IN STD_LOGIC_VECTOR (7 downto 0);
    motionSpeed : IN STD_LOGIC_VECTOR (7 downto 0);
    colorFormat : IN STD_LOGIC_VECTOR (7 downto 0);
    ZplateHorContStart : IN STD_LOGIC_VECTOR (15 downto 0);
    ZplateHorContDelta : IN STD_LOGIC_VECTOR (15 downto 0);
    ZplateVerContStart : IN STD_LOGIC_VECTOR (15 downto 0);
    ZplateVerContDelta : IN STD_LOGIC_VECTOR (15 downto 0);
    dpDynamicRange : IN STD_LOGIC_VECTOR (7 downto 0);
    dpYUVCoef : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    fid : OUT STD_LOGIC_VECTOR (0 downto 0);
    s : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    height_ap_vld : IN STD_LOGIC;
    width_ap_vld : IN STD_LOGIC;
    bckgndId_ap_vld : IN STD_LOGIC;
    ZplateHorContStart_ap_vld : IN STD_LOGIC;
    ZplateHorContDelta_ap_vld : IN STD_LOGIC;
    ZplateVerContStart_ap_vld : IN STD_LOGIC;
    ZplateVerContDelta_ap_vld : IN STD_LOGIC;
    dpDynamicRange_ap_vld : IN STD_LOGIC;
    dpYUVCoef_ap_vld : IN STD_LOGIC;
    motionSpeed_ap_vld : IN STD_LOGIC;
    colorFormat_ap_vld : IN STD_LOGIC;
    s_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    fid_in_ap_vld : IN STD_LOGIC;
    fid_ap_vld : OUT STD_LOGIC;
    field_id_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of design_1_v_tpg_0_0_v_tpgHlsDataFlow is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal tpgBackground_U0_ap_start : STD_LOGIC;
    signal tpgBackground_U0_ap_done : STD_LOGIC;
    signal tpgBackground_U0_ap_continue : STD_LOGIC;
    signal tpgBackground_U0_ap_idle : STD_LOGIC;
    signal tpgBackground_U0_ap_ready : STD_LOGIC;
    signal tpgBackground_U0_start_out : STD_LOGIC;
    signal tpgBackground_U0_start_write : STD_LOGIC;
    signal tpgBackground_U0_ovrlayYUV_din : STD_LOGIC_VECTOR (23 downto 0);
    signal tpgBackground_U0_ovrlayYUV_write : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_start : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_done : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ovrlayYUV_read : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TVALID : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_fid : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_fid_ap_vld : STD_LOGIC;
    signal ovrlayYUV_full_n : STD_LOGIC;
    signal ovrlayYUV_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal ovrlayYUV_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal ovrlayYUV_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal ovrlayYUV_empty_n : STD_LOGIC;
    signal start_for_MultiPixStream2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MultiPixStream2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_MultiPixStream2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MultiPixStream2AXIvideo_U0_empty_n : STD_LOGIC;

    component design_1_v_tpg_0_0_tpgBackground IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        bckgndId : IN STD_LOGIC_VECTOR (7 downto 0);
        ZplateHorContStart : IN STD_LOGIC_VECTOR (15 downto 0);
        ZplateHorContDelta : IN STD_LOGIC_VECTOR (15 downto 0);
        ZplateVerContStart : IN STD_LOGIC_VECTOR (15 downto 0);
        ZplateVerContDelta : IN STD_LOGIC_VECTOR (15 downto 0);
        dpDynamicRange : IN STD_LOGIC_VECTOR (7 downto 0);
        dpYUVCoef : IN STD_LOGIC_VECTOR (7 downto 0);
        motionSpeed : IN STD_LOGIC_VECTOR (7 downto 0);
        colorFormat : IN STD_LOGIC_VECTOR (7 downto 0);
        ovrlayYUV_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        ovrlayYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        ovrlayYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        ovrlayYUV_full_n : IN STD_LOGIC;
        ovrlayYUV_write : OUT STD_LOGIC;
        s : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component design_1_v_tpg_0_0_MultiPixStream2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ovrlayYUV_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        ovrlayYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        ovrlayYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        ovrlayYUV_empty_n : IN STD_LOGIC;
        ovrlayYUV_read : OUT STD_LOGIC;
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        colorFormat : IN STD_LOGIC_VECTOR (7 downto 0);
        fid_in : IN STD_LOGIC_VECTOR (0 downto 0);
        fid : OUT STD_LOGIC_VECTOR (0 downto 0);
        fid_ap_vld : OUT STD_LOGIC;
        field_id : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component design_1_v_tpg_0_0_fifo_w24_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component design_1_v_tpg_0_0_start_for_MultiPixStream2AXIvideo_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    tpgBackground_U0 : component design_1_v_tpg_0_0_tpgBackground
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => tpgBackground_U0_ap_start,
        start_full_n => start_for_MultiPixStream2AXIvideo_U0_full_n,
        ap_done => tpgBackground_U0_ap_done,
        ap_continue => tpgBackground_U0_ap_continue,
        ap_idle => tpgBackground_U0_ap_idle,
        ap_ready => tpgBackground_U0_ap_ready,
        start_out => tpgBackground_U0_start_out,
        start_write => tpgBackground_U0_start_write,
        height => height,
        width => width,
        bckgndId => bckgndId,
        ZplateHorContStart => ZplateHorContStart,
        ZplateHorContDelta => ZplateHorContDelta,
        ZplateVerContStart => ZplateVerContStart,
        ZplateVerContDelta => ZplateVerContDelta,
        dpDynamicRange => dpDynamicRange,
        dpYUVCoef => dpYUVCoef,
        motionSpeed => motionSpeed,
        colorFormat => colorFormat,
        ovrlayYUV_din => tpgBackground_U0_ovrlayYUV_din,
        ovrlayYUV_num_data_valid => ovrlayYUV_num_data_valid,
        ovrlayYUV_fifo_cap => ovrlayYUV_fifo_cap,
        ovrlayYUV_full_n => ovrlayYUV_full_n,
        ovrlayYUV_write => tpgBackground_U0_ovrlayYUV_write,
        s => s);

    MultiPixStream2AXIvideo_U0 : component design_1_v_tpg_0_0_MultiPixStream2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => MultiPixStream2AXIvideo_U0_ap_start,
        ap_done => MultiPixStream2AXIvideo_U0_ap_done,
        ap_continue => MultiPixStream2AXIvideo_U0_ap_continue,
        ap_idle => MultiPixStream2AXIvideo_U0_ap_idle,
        ap_ready => MultiPixStream2AXIvideo_U0_ap_ready,
        ovrlayYUV_dout => ovrlayYUV_dout,
        ovrlayYUV_num_data_valid => ovrlayYUV_num_data_valid,
        ovrlayYUV_fifo_cap => ovrlayYUV_fifo_cap,
        ovrlayYUV_empty_n => ovrlayYUV_empty_n,
        ovrlayYUV_read => MultiPixStream2AXIvideo_U0_ovrlayYUV_read,
        m_axis_video_TDATA => MultiPixStream2AXIvideo_U0_m_axis_video_TDATA,
        m_axis_video_TVALID => MultiPixStream2AXIvideo_U0_m_axis_video_TVALID,
        m_axis_video_TREADY => m_axis_video_TREADY,
        m_axis_video_TKEEP => MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP,
        m_axis_video_TSTRB => MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB,
        m_axis_video_TUSER => MultiPixStream2AXIvideo_U0_m_axis_video_TUSER,
        m_axis_video_TLAST => MultiPixStream2AXIvideo_U0_m_axis_video_TLAST,
        m_axis_video_TID => MultiPixStream2AXIvideo_U0_m_axis_video_TID,
        m_axis_video_TDEST => MultiPixStream2AXIvideo_U0_m_axis_video_TDEST,
        height => height,
        width => width,
        colorFormat => colorFormat,
        fid_in => fid_in,
        fid => MultiPixStream2AXIvideo_U0_fid,
        fid_ap_vld => MultiPixStream2AXIvideo_U0_fid_ap_vld,
        field_id => field_id);

    ovrlayYUV_U : component design_1_v_tpg_0_0_fifo_w24_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tpgBackground_U0_ovrlayYUV_din,
        if_full_n => ovrlayYUV_full_n,
        if_write => tpgBackground_U0_ovrlayYUV_write,
        if_dout => ovrlayYUV_dout,
        if_num_data_valid => ovrlayYUV_num_data_valid,
        if_fifo_cap => ovrlayYUV_fifo_cap,
        if_empty_n => ovrlayYUV_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_ovrlayYUV_read);

    start_for_MultiPixStream2AXIvideo_U0_U : component design_1_v_tpg_0_0_start_for_MultiPixStream2AXIvideo_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_MultiPixStream2AXIvideo_U0_din,
        if_full_n => start_for_MultiPixStream2AXIvideo_U0_full_n,
        if_write => tpgBackground_U0_start_write,
        if_dout => start_for_MultiPixStream2AXIvideo_U0_dout,
        if_empty_n => start_for_MultiPixStream2AXIvideo_U0_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_ap_ready);




    MultiPixStream2AXIvideo_U0_ap_continue <= ap_continue;
    MultiPixStream2AXIvideo_U0_ap_start <= start_for_MultiPixStream2AXIvideo_U0_empty_n;
    ap_done <= MultiPixStream2AXIvideo_U0_ap_done;
    ap_idle <= (tpgBackground_U0_ap_idle and MultiPixStream2AXIvideo_U0_ap_idle);
    ap_ready <= tpgBackground_U0_ap_ready;
    fid <= MultiPixStream2AXIvideo_U0_fid;
    fid_ap_vld <= MultiPixStream2AXIvideo_U0_fid_ap_vld;
    m_axis_video_TDATA <= MultiPixStream2AXIvideo_U0_m_axis_video_TDATA;
    m_axis_video_TDEST <= MultiPixStream2AXIvideo_U0_m_axis_video_TDEST;
    m_axis_video_TID <= MultiPixStream2AXIvideo_U0_m_axis_video_TID;
    m_axis_video_TKEEP <= MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP;
    m_axis_video_TLAST <= MultiPixStream2AXIvideo_U0_m_axis_video_TLAST;
    m_axis_video_TSTRB <= MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB;
    m_axis_video_TUSER <= MultiPixStream2AXIvideo_U0_m_axis_video_TUSER;
    m_axis_video_TVALID <= MultiPixStream2AXIvideo_U0_m_axis_video_TVALID;
    start_for_MultiPixStream2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    tpgBackground_U0_ap_continue <= ap_const_logic_1;
    tpgBackground_U0_ap_start <= ap_start;
end behav;
