// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hud_gen,hls_ip_2019_1_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.470000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=1213,HLS_SYN_LUT=2040,HLS_VERSION=2019_1_1}" *)

module hud_gen (
        ap_clk,
        ap_rst_n,
        op_TDATA,
        op_TVALID,
        op_TREADY,
        op_TKEEP,
        op_TSTRB,
        op_TUSER,
        op_TLAST,
        op_TID,
        op_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] op_TDATA;
output   op_TVALID;
input   op_TREADY;
output  [3:0] op_TKEEP;
output  [3:0] op_TSTRB;
output  [0:0] op_TUSER;
output  [0:0] op_TLAST;
output  [0:0] op_TID;
output  [0:0] op_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] op_V_data_V_1_data_out;
reg    op_V_data_V_1_vld_in;
wire    op_V_data_V_1_vld_out;
wire    op_V_data_V_1_ack_in;
wire    op_V_data_V_1_ack_out;
reg   [31:0] op_V_data_V_1_payload_A;
reg   [31:0] op_V_data_V_1_payload_B;
reg    op_V_data_V_1_sel_rd;
reg    op_V_data_V_1_sel_wr;
wire    op_V_data_V_1_sel;
wire    op_V_data_V_1_load_A;
wire    op_V_data_V_1_load_B;
reg   [1:0] op_V_data_V_1_state;
wire    op_V_data_V_1_state_cmp_full;
wire   [3:0] op_V_keep_V_1_data_out;
reg    op_V_keep_V_1_vld_in;
wire    op_V_keep_V_1_vld_out;
wire    op_V_keep_V_1_ack_out;
reg    op_V_keep_V_1_sel_rd;
wire    op_V_keep_V_1_sel;
reg   [1:0] op_V_keep_V_1_state;
wire   [3:0] op_V_strb_V_1_data_out;
reg    op_V_strb_V_1_vld_in;
wire    op_V_strb_V_1_vld_out;
wire    op_V_strb_V_1_ack_out;
reg    op_V_strb_V_1_sel_rd;
wire    op_V_strb_V_1_sel;
reg   [1:0] op_V_strb_V_1_state;
reg   [0:0] op_V_user_V_1_data_out;
reg    op_V_user_V_1_vld_in;
wire    op_V_user_V_1_vld_out;
wire    op_V_user_V_1_ack_in;
wire    op_V_user_V_1_ack_out;
reg   [0:0] op_V_user_V_1_payload_A;
reg   [0:0] op_V_user_V_1_payload_B;
reg    op_V_user_V_1_sel_rd;
reg    op_V_user_V_1_sel_wr;
wire    op_V_user_V_1_sel;
wire    op_V_user_V_1_load_A;
wire    op_V_user_V_1_load_B;
reg   [1:0] op_V_user_V_1_state;
wire    op_V_user_V_1_state_cmp_full;
reg   [0:0] op_V_last_V_1_data_out;
reg    op_V_last_V_1_vld_in;
wire    op_V_last_V_1_vld_out;
wire    op_V_last_V_1_ack_in;
wire    op_V_last_V_1_ack_out;
reg   [0:0] op_V_last_V_1_payload_A;
reg   [0:0] op_V_last_V_1_payload_B;
reg    op_V_last_V_1_sel_rd;
reg    op_V_last_V_1_sel_wr;
wire    op_V_last_V_1_sel;
wire    op_V_last_V_1_load_A;
wire    op_V_last_V_1_load_B;
reg   [1:0] op_V_last_V_1_state;
wire    op_V_last_V_1_state_cmp_full;
wire   [0:0] op_V_id_V_1_data_out;
reg    op_V_id_V_1_vld_in;
wire    op_V_id_V_1_vld_out;
wire    op_V_id_V_1_ack_out;
reg    op_V_id_V_1_sel_rd;
wire    op_V_id_V_1_sel;
reg   [1:0] op_V_id_V_1_state;
wire   [0:0] op_V_dest_V_1_data_out;
reg    op_V_dest_V_1_vld_in;
wire    op_V_dest_V_1_vld_out;
wire    op_V_dest_V_1_ack_out;
reg    op_V_dest_V_1_sel_rd;
wire    op_V_dest_V_1_sel;
reg   [1:0] op_V_dest_V_1_state;
wire   [31:0] row;
wire   [31:0] column;
wire   [31:0] ball_y;
wire   [31:0] ball_x;
wire   [31:0] ball_size;
wire   [31:0] ball_colour;
wire   [31:0] bar_pos_x;
wire   [31:0] bar_width;
reg    op_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln25_reg_876;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln25_reg_876_pp0_iter1_reg;
reg   [63:0] indvar_flatten_reg_175;
reg   [30:0] y_0_reg_186;
reg   [30:0] x_0_reg_197;
reg   [31:0] bar_width_read_reg_776;
reg   [31:0] bar_pos_x_read_reg_781;
reg   [31:0] ball_size_read_reg_787;
reg   [31:0] ball_x_read_reg_795;
reg   [31:0] ball_y_read_reg_801;
reg   [31:0] column_read_reg_807;
reg   [31:0] row_read_reg_815;
wire   [31:0] add_ln32_fu_208_p2;
reg   [31:0] add_ln32_reg_822;
wire    ap_CS_fsm_state2;
wire   [31:0] sub_ln40_fu_213_p2;
reg   [31:0] sub_ln40_reg_827;
wire   [31:0] add_ln40_fu_217_p2;
reg   [31:0] add_ln40_reg_832;
wire   [31:0] sub_ln40_1_fu_221_p2;
reg   [31:0] sub_ln40_1_reg_837;
wire   [31:0] add_ln40_1_fu_225_p2;
reg   [31:0] add_ln40_1_reg_843;
wire   [31:0] add_ln44_fu_229_p2;
reg   [31:0] add_ln44_reg_849;
wire   [31:0] add_ln44_1_fu_233_p2;
reg   [31:0] add_ln44_1_reg_854;
wire   [31:0] add_ln44_2_fu_238_p2;
reg   [31:0] add_ln44_2_reg_860;
wire   [31:0] add_ln48_fu_243_p2;
reg   [31:0] add_ln48_reg_866;
wire   [63:0] bound_fu_254_p2;
reg   [63:0] bound_reg_871;
wire   [0:0] icmp_ln25_fu_335_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] add_ln25_fu_340_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [30:0] select_ln25_4_fu_454_p3;
reg   [30:0] select_ln25_4_reg_885;
wire   [0:0] icmp_ln28_fu_468_p2;
reg   [0:0] icmp_ln28_reg_890;
wire   [0:0] icmp_ln32_fu_474_p2;
reg   [0:0] icmp_ln32_reg_899;
wire   [0:0] and_ln40_2_fu_507_p2;
reg   [0:0] and_ln40_2_reg_905;
wire   [0:0] and_ln44_2_fu_541_p2;
reg   [0:0] and_ln44_2_reg_912;
wire   [0:0] icmp_ln48_3_fu_584_p2;
reg   [0:0] icmp_ln48_3_reg_918;
wire   [30:0] x_fu_590_p2;
wire   [0:0] tmp_user_V_1_fu_666_p2;
wire   [0:0] tmp_last_V_1_fu_684_p2;
wire   [31:0] tmp_data_V_1_fu_734_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [30:0] ap_phi_mux_y_0_phi_fu_190_p4;
reg   [31:0] tmp_data_V_fu_92;
reg   [0:0] tmp_last_V_fu_96;
reg   [0:0] tmp_user_V_fu_100;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_254_p0;
wire   [31:0] bound_fu_254_p1;
wire   [31:0] zext_ln25_1_fu_260_p1;
wire   [0:0] icmp_ln40_fu_264_p2;
wire   [0:0] icmp_ln40_1_fu_275_p2;
wire   [0:0] icmp_ln44_fu_286_p2;
wire   [0:0] icmp_ln44_1_fu_297_p2;
wire   [0:0] xor_ln40_3_fu_280_p2;
wire   [0:0] xor_ln40_2_fu_269_p2;
wire   [0:0] xor_ln44_2_fu_302_p2;
wire   [0:0] xor_ln44_1_fu_291_p2;
wire   [31:0] zext_ln27_fu_326_p1;
wire   [30:0] add_ln25_1_fu_346_p2;
wire   [0:0] icmp_ln27_fu_330_p2;
wire   [31:0] zext_ln25_fu_352_p1;
wire   [0:0] icmp_ln40_2_fu_364_p2;
wire   [0:0] icmp_ln40_3_fu_375_p2;
wire   [0:0] icmp_ln44_2_fu_386_p2;
wire   [0:0] icmp_ln44_3_fu_397_p2;
wire   [0:0] icmp_ln48_fu_308_p2;
wire   [0:0] icmp_ln48_2_fu_408_p2;
wire   [0:0] xor_ln40_5_fu_380_p2;
wire   [0:0] xor_ln40_4_fu_369_p2;
wire   [0:0] and_ln40_1_fu_314_p2;
wire   [0:0] and_ln40_4_fu_422_p2;
wire   [0:0] xor_ln44_4_fu_402_p2;
wire   [0:0] xor_ln44_3_fu_391_p2;
wire   [0:0] and_ln44_1_fu_320_p2;
wire   [0:0] and_ln44_4_fu_436_p2;
wire   [30:0] select_ln25_fu_356_p3;
wire   [30:0] or_ln28_fu_462_p2;
wire   [31:0] zext_ln25_2_fu_450_p1;
wire   [0:0] icmp_ln40_4_fu_479_p2;
wire   [0:0] icmp_ln40_5_fu_490_p2;
wire   [0:0] xor_ln40_6_fu_484_p2;
wire   [0:0] xor_ln40_7_fu_495_p2;
wire   [0:0] select_ln25_2_fu_428_p3;
wire   [0:0] and_ln40_fu_501_p2;
wire   [0:0] icmp_ln44_4_fu_513_p2;
wire   [0:0] icmp_ln44_5_fu_524_p2;
wire   [0:0] xor_ln44_5_fu_518_p2;
wire   [0:0] xor_ln44_6_fu_529_p2;
wire   [0:0] select_ln25_3_fu_442_p3;
wire   [0:0] and_ln44_fu_535_p2;
wire   [0:0] icmp_ln48_4_fu_553_p2;
wire   [0:0] select_ln25_1_fu_414_p3;
wire   [0:0] xor_ln48_fu_558_p2;
wire   [0:0] or_ln48_fu_564_p2;
wire   [0:0] icmp_ln48_1_fu_547_p2;
wire   [0:0] or_ln48_2_fu_570_p2;
wire   [31:0] or_ln48_1_fu_576_p3;
wire   [0:0] xor_ln28_fu_612_p2;
wire   [0:0] and_ln32_fu_617_p2;
wire   [0:0] or_ln32_fu_629_p2;
wire   [0:0] xor_ln40_fu_633_p2;
wire   [0:0] or_ln40_1_fu_644_p2;
wire   [0:0] xor_ln44_fu_649_p2;
wire   [0:0] or_ln40_fu_638_p2;
wire   [0:0] or_ln44_fu_654_p2;
wire   [0:0] and_ln44_3_fu_660_p2;
wire   [0:0] select_ln32_fu_622_p3;
wire   [0:0] and_ln28_fu_673_p2;
wire   [0:0] or_ln32_1_fu_678_p2;
wire   [31:0] select_ln48_fu_605_p3;
wire   [31:0] select_ln28_fu_691_p3;
wire   [0:0] xor_ln32_fu_706_p2;
wire   [0:0] xor_ln40_1_fu_717_p2;
wire   [0:0] and_ln44_7_fu_723_p2;
wire   [0:0] and_ln40_3_fu_712_p2;
wire   [0:0] or_ln44_1_fu_728_p2;
wire   [31:0] select_ln32_1_fu_698_p3;
wire    ap_CS_fsm_state6;
reg    ap_block_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_254_p00;
wire   [63:0] bound_fu_254_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 op_V_data_V_1_sel_rd = 1'b0;
#0 op_V_data_V_1_sel_wr = 1'b0;
#0 op_V_data_V_1_state = 2'd0;
#0 op_V_keep_V_1_sel_rd = 1'b0;
#0 op_V_keep_V_1_state = 2'd0;
#0 op_V_strb_V_1_sel_rd = 1'b0;
#0 op_V_strb_V_1_state = 2'd0;
#0 op_V_user_V_1_sel_rd = 1'b0;
#0 op_V_user_V_1_sel_wr = 1'b0;
#0 op_V_user_V_1_state = 2'd0;
#0 op_V_last_V_1_sel_rd = 1'b0;
#0 op_V_last_V_1_sel_wr = 1'b0;
#0 op_V_last_V_1_state = 2'd0;
#0 op_V_id_V_1_sel_rd = 1'b0;
#0 op_V_id_V_1_state = 2'd0;
#0 op_V_dest_V_1_sel_rd = 1'b0;
#0 op_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

hud_gen_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
hud_gen_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .row(row),
    .column(column),
    .ball_y(ball_y),
    .ball_x(ball_x),
    .ball_size(ball_size),
    .ball_colour(ball_colour),
    .bar_pos_x(bar_pos_x),
    .bar_width(bar_width)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_V_data_V_1_ack_out == 1'b1) & (op_V_data_V_1_vld_out == 1'b1))) begin
            op_V_data_V_1_sel_rd <= ~op_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((op_V_data_V_1_ack_in == 1'b1) & (op_V_data_V_1_vld_in == 1'b1))) begin
            op_V_data_V_1_sel_wr <= ~op_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((op_V_data_V_1_state == 2'd2) & (op_V_data_V_1_vld_in == 1'b0)) | ((op_V_data_V_1_state == 2'd3) & (op_V_data_V_1_vld_in == 1'b0) & (op_V_data_V_1_ack_out == 1'b1)))) begin
            op_V_data_V_1_state <= 2'd2;
        end else if ((((op_V_data_V_1_state == 2'd1) & (op_TREADY == 1'b0)) | ((op_V_data_V_1_state == 2'd3) & (op_TREADY == 1'b0) & (op_V_data_V_1_vld_in == 1'b1)))) begin
            op_V_data_V_1_state <= 2'd1;
        end else if (((~((op_V_data_V_1_vld_in == 1'b0) & (op_V_data_V_1_ack_out == 1'b1)) & ~((op_TREADY == 1'b0) & (op_V_data_V_1_vld_in == 1'b1)) & (op_V_data_V_1_state == 2'd3)) | ((op_V_data_V_1_state == 2'd1) & (op_V_data_V_1_ack_out == 1'b1)) | ((op_V_data_V_1_state == 2'd2) & (op_V_data_V_1_vld_in == 1'b1)))) begin
            op_V_data_V_1_state <= 2'd3;
        end else begin
            op_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_V_dest_V_1_ack_out == 1'b1) & (op_V_dest_V_1_vld_out == 1'b1))) begin
            op_V_dest_V_1_sel_rd <= ~op_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((op_V_dest_V_1_state == 2'd2) & (op_V_dest_V_1_vld_in == 1'b0)) | ((op_V_dest_V_1_state == 2'd3) & (op_V_dest_V_1_vld_in == 1'b0) & (op_V_dest_V_1_ack_out == 1'b1)))) begin
            op_V_dest_V_1_state <= 2'd2;
        end else if ((((op_V_dest_V_1_state == 2'd1) & (op_TREADY == 1'b0)) | ((op_V_dest_V_1_state == 2'd3) & (op_TREADY == 1'b0) & (op_V_dest_V_1_vld_in == 1'b1)))) begin
            op_V_dest_V_1_state <= 2'd1;
        end else if (((~((op_V_dest_V_1_vld_in == 1'b0) & (op_V_dest_V_1_ack_out == 1'b1)) & ~((op_TREADY == 1'b0) & (op_V_dest_V_1_vld_in == 1'b1)) & (op_V_dest_V_1_state == 2'd3)) | ((op_V_dest_V_1_state == 2'd1) & (op_V_dest_V_1_ack_out == 1'b1)) | ((op_V_dest_V_1_state == 2'd2) & (op_V_dest_V_1_vld_in == 1'b1)))) begin
            op_V_dest_V_1_state <= 2'd3;
        end else begin
            op_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_V_id_V_1_ack_out == 1'b1) & (op_V_id_V_1_vld_out == 1'b1))) begin
            op_V_id_V_1_sel_rd <= ~op_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((op_V_id_V_1_state == 2'd2) & (op_V_id_V_1_vld_in == 1'b0)) | ((op_V_id_V_1_state == 2'd3) & (op_V_id_V_1_vld_in == 1'b0) & (op_V_id_V_1_ack_out == 1'b1)))) begin
            op_V_id_V_1_state <= 2'd2;
        end else if ((((op_V_id_V_1_state == 2'd1) & (op_TREADY == 1'b0)) | ((op_V_id_V_1_state == 2'd3) & (op_TREADY == 1'b0) & (op_V_id_V_1_vld_in == 1'b1)))) begin
            op_V_id_V_1_state <= 2'd1;
        end else if (((~((op_V_id_V_1_vld_in == 1'b0) & (op_V_id_V_1_ack_out == 1'b1)) & ~((op_TREADY == 1'b0) & (op_V_id_V_1_vld_in == 1'b1)) & (op_V_id_V_1_state == 2'd3)) | ((op_V_id_V_1_state == 2'd1) & (op_V_id_V_1_ack_out == 1'b1)) | ((op_V_id_V_1_state == 2'd2) & (op_V_id_V_1_vld_in == 1'b1)))) begin
            op_V_id_V_1_state <= 2'd3;
        end else begin
            op_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_V_keep_V_1_vld_out == 1'b1) & (op_V_keep_V_1_ack_out == 1'b1))) begin
            op_V_keep_V_1_sel_rd <= ~op_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((op_V_keep_V_1_state == 2'd2) & (op_V_keep_V_1_vld_in == 1'b0)) | ((op_V_keep_V_1_state == 2'd3) & (op_V_keep_V_1_vld_in == 1'b0) & (op_V_keep_V_1_ack_out == 1'b1)))) begin
            op_V_keep_V_1_state <= 2'd2;
        end else if ((((op_V_keep_V_1_state == 2'd1) & (op_TREADY == 1'b0)) | ((op_V_keep_V_1_state == 2'd3) & (op_TREADY == 1'b0) & (op_V_keep_V_1_vld_in == 1'b1)))) begin
            op_V_keep_V_1_state <= 2'd1;
        end else if (((~((op_V_keep_V_1_vld_in == 1'b0) & (op_V_keep_V_1_ack_out == 1'b1)) & ~((op_TREADY == 1'b0) & (op_V_keep_V_1_vld_in == 1'b1)) & (op_V_keep_V_1_state == 2'd3)) | ((op_V_keep_V_1_state == 2'd1) & (op_V_keep_V_1_ack_out == 1'b1)) | ((op_V_keep_V_1_state == 2'd2) & (op_V_keep_V_1_vld_in == 1'b1)))) begin
            op_V_keep_V_1_state <= 2'd3;
        end else begin
            op_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_V_last_V_1_ack_out == 1'b1) & (op_V_last_V_1_vld_out == 1'b1))) begin
            op_V_last_V_1_sel_rd <= ~op_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((op_V_last_V_1_ack_in == 1'b1) & (op_V_last_V_1_vld_in == 1'b1))) begin
            op_V_last_V_1_sel_wr <= ~op_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((op_V_last_V_1_state == 2'd2) & (op_V_last_V_1_vld_in == 1'b0)) | ((op_V_last_V_1_state == 2'd3) & (op_V_last_V_1_vld_in == 1'b0) & (op_V_last_V_1_ack_out == 1'b1)))) begin
            op_V_last_V_1_state <= 2'd2;
        end else if ((((op_V_last_V_1_state == 2'd1) & (op_TREADY == 1'b0)) | ((op_V_last_V_1_state == 2'd3) & (op_TREADY == 1'b0) & (op_V_last_V_1_vld_in == 1'b1)))) begin
            op_V_last_V_1_state <= 2'd1;
        end else if (((~((op_V_last_V_1_vld_in == 1'b0) & (op_V_last_V_1_ack_out == 1'b1)) & ~((op_TREADY == 1'b0) & (op_V_last_V_1_vld_in == 1'b1)) & (op_V_last_V_1_state == 2'd3)) | ((op_V_last_V_1_state == 2'd1) & (op_V_last_V_1_ack_out == 1'b1)) | ((op_V_last_V_1_state == 2'd2) & (op_V_last_V_1_vld_in == 1'b1)))) begin
            op_V_last_V_1_state <= 2'd3;
        end else begin
            op_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_V_strb_V_1_ack_out == 1'b1) & (op_V_strb_V_1_vld_out == 1'b1))) begin
            op_V_strb_V_1_sel_rd <= ~op_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((op_V_strb_V_1_state == 2'd2) & (op_V_strb_V_1_vld_in == 1'b0)) | ((op_V_strb_V_1_state == 2'd3) & (op_V_strb_V_1_vld_in == 1'b0) & (op_V_strb_V_1_ack_out == 1'b1)))) begin
            op_V_strb_V_1_state <= 2'd2;
        end else if ((((op_V_strb_V_1_state == 2'd1) & (op_TREADY == 1'b0)) | ((op_V_strb_V_1_state == 2'd3) & (op_TREADY == 1'b0) & (op_V_strb_V_1_vld_in == 1'b1)))) begin
            op_V_strb_V_1_state <= 2'd1;
        end else if (((~((op_V_strb_V_1_vld_in == 1'b0) & (op_V_strb_V_1_ack_out == 1'b1)) & ~((op_TREADY == 1'b0) & (op_V_strb_V_1_vld_in == 1'b1)) & (op_V_strb_V_1_state == 2'd3)) | ((op_V_strb_V_1_state == 2'd1) & (op_V_strb_V_1_ack_out == 1'b1)) | ((op_V_strb_V_1_state == 2'd2) & (op_V_strb_V_1_vld_in == 1'b1)))) begin
            op_V_strb_V_1_state <= 2'd3;
        end else begin
            op_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((op_V_user_V_1_ack_out == 1'b1) & (op_V_user_V_1_vld_out == 1'b1))) begin
            op_V_user_V_1_sel_rd <= ~op_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((op_V_user_V_1_ack_in == 1'b1) & (op_V_user_V_1_vld_in == 1'b1))) begin
            op_V_user_V_1_sel_wr <= ~op_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        op_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((op_V_user_V_1_state == 2'd2) & (op_V_user_V_1_vld_in == 1'b0)) | ((op_V_user_V_1_state == 2'd3) & (op_V_user_V_1_vld_in == 1'b0) & (op_V_user_V_1_ack_out == 1'b1)))) begin
            op_V_user_V_1_state <= 2'd2;
        end else if ((((op_V_user_V_1_state == 2'd1) & (op_TREADY == 1'b0)) | ((op_V_user_V_1_state == 2'd3) & (op_TREADY == 1'b0) & (op_V_user_V_1_vld_in == 1'b1)))) begin
            op_V_user_V_1_state <= 2'd1;
        end else if (((~((op_V_user_V_1_vld_in == 1'b0) & (op_V_user_V_1_ack_out == 1'b1)) & ~((op_TREADY == 1'b0) & (op_V_user_V_1_vld_in == 1'b1)) & (op_V_user_V_1_state == 2'd3)) | ((op_V_user_V_1_state == 2'd1) & (op_V_user_V_1_ack_out == 1'b1)) | ((op_V_user_V_1_state == 2'd2) & (op_V_user_V_1_vld_in == 1'b1)))) begin
            op_V_user_V_1_state <= 2'd3;
        end else begin
            op_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_335_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_175 <= add_ln25_fu_340_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_reg_175 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_335_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        x_0_reg_197 <= x_fu_590_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_0_reg_197 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_876 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        y_0_reg_186 <= select_ln25_4_reg_885;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        y_0_reg_186 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln32_reg_822 <= add_ln32_fu_208_p2;
        add_ln40_1_reg_843 <= add_ln40_1_fu_225_p2;
        add_ln40_reg_832 <= add_ln40_fu_217_p2;
        add_ln44_1_reg_854 <= add_ln44_1_fu_233_p2;
        add_ln44_2_reg_860 <= add_ln44_2_fu_238_p2;
        add_ln44_reg_849 <= add_ln44_fu_229_p2;
        add_ln48_reg_866 <= add_ln48_fu_243_p2;
        bound_reg_871 <= bound_fu_254_p2;
        sub_ln40_1_reg_837 <= sub_ln40_1_fu_221_p2;
        sub_ln40_reg_827 <= sub_ln40_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln40_2_reg_905 <= and_ln40_2_fu_507_p2;
        and_ln44_2_reg_912 <= and_ln44_2_fu_541_p2;
        icmp_ln28_reg_890 <= icmp_ln28_fu_468_p2;
        icmp_ln32_reg_899 <= icmp_ln32_fu_474_p2;
        icmp_ln48_3_reg_918 <= icmp_ln48_3_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ball_size_read_reg_787 <= ball_size;
        ball_x_read_reg_795 <= ball_x;
        ball_y_read_reg_801 <= ball_y;
        bar_pos_x_read_reg_781 <= bar_pos_x;
        bar_width_read_reg_776 <= bar_width;
        column_read_reg_807 <= column;
        row_read_reg_815 <= row;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln25_reg_876 <= icmp_ln25_fu_335_p2;
        icmp_ln25_reg_876_pp0_iter1_reg <= icmp_ln25_reg_876;
    end
end

always @ (posedge ap_clk) begin
    if ((op_V_data_V_1_load_A == 1'b1)) begin
        op_V_data_V_1_payload_A <= tmp_data_V_1_fu_734_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((op_V_data_V_1_load_B == 1'b1)) begin
        op_V_data_V_1_payload_B <= tmp_data_V_1_fu_734_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((op_V_last_V_1_load_A == 1'b1)) begin
        op_V_last_V_1_payload_A <= tmp_last_V_1_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((op_V_last_V_1_load_B == 1'b1)) begin
        op_V_last_V_1_payload_B <= tmp_last_V_1_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((op_V_user_V_1_load_A == 1'b1)) begin
        op_V_user_V_1_payload_A <= tmp_user_V_1_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((op_V_user_V_1_load_B == 1'b1)) begin
        op_V_user_V_1_payload_B <= tmp_user_V_1_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_335_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln25_4_reg_885 <= select_ln25_4_fu_454_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_876 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_data_V_fu_92 <= tmp_data_V_1_fu_734_p3;
        tmp_last_V_fu_96 <= tmp_last_V_1_fu_684_p2;
        tmp_user_V_fu_100 <= tmp_user_V_1_fu_666_p2;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_335_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((op_V_dest_V_1_state == 2'd1) | (op_V_id_V_1_state == 2'd1) | (op_V_last_V_1_state == 2'd1) | (op_V_user_V_1_state == 2'd1) | (op_V_strb_V_1_state == 2'd1) | (op_V_keep_V_1_state == 2'd1) | (op_V_data_V_1_state == 2'd1) | ((op_V_data_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_dest_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_id_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_last_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_user_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_strb_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_keep_V_1_state == 2'd3) & (op_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_876 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_y_0_phi_fu_190_p4 = select_ln25_4_reg_885;
    end else begin
        ap_phi_mux_y_0_phi_fu_190_p4 = y_0_reg_186;
    end
end

always @ (*) begin
    if ((~((op_V_dest_V_1_state == 2'd1) | (op_V_id_V_1_state == 2'd1) | (op_V_last_V_1_state == 2'd1) | (op_V_user_V_1_state == 2'd1) | (op_V_strb_V_1_state == 2'd1) | (op_V_keep_V_1_state == 2'd1) | (op_V_data_V_1_state == 2'd1) | ((op_V_data_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_dest_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_id_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_last_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_user_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_strb_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_keep_V_1_state == 2'd3) & (op_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln25_reg_876_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln25_reg_876 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        op_TDATA_blk_n = op_V_data_V_1_state[1'd1];
    end else begin
        op_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((op_V_data_V_1_sel == 1'b1)) begin
        op_V_data_V_1_data_out = op_V_data_V_1_payload_B;
    end else begin
        op_V_data_V_1_data_out = op_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_876 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_V_data_V_1_vld_in = 1'b1;
    end else begin
        op_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_876 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_V_dest_V_1_vld_in = 1'b1;
    end else begin
        op_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_876 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_V_id_V_1_vld_in = 1'b1;
    end else begin
        op_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_876 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_V_keep_V_1_vld_in = 1'b1;
    end else begin
        op_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((op_V_last_V_1_sel == 1'b1)) begin
        op_V_last_V_1_data_out = op_V_last_V_1_payload_B;
    end else begin
        op_V_last_V_1_data_out = op_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_876 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_V_last_V_1_vld_in = 1'b1;
    end else begin
        op_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_876 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_V_strb_V_1_vld_in = 1'b1;
    end else begin
        op_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((op_V_user_V_1_sel == 1'b1)) begin
        op_V_user_V_1_data_out = op_V_user_V_1_payload_B;
    end else begin
        op_V_user_V_1_data_out = op_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_876 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_V_user_V_1_vld_in = 1'b1;
    end else begin
        op_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_335_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_335_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((op_V_dest_V_1_state == 2'd1) | (op_V_id_V_1_state == 2'd1) | (op_V_last_V_1_state == 2'd1) | (op_V_user_V_1_state == 2'd1) | (op_V_strb_V_1_state == 2'd1) | (op_V_keep_V_1_state == 2'd1) | (op_V_data_V_1_state == 2'd1) | ((op_V_data_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_dest_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_id_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_last_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_user_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_strb_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_keep_V_1_state == 2'd3) & (op_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln25_1_fu_346_p2 = (ap_phi_mux_y_0_phi_fu_190_p4 + 31'd1);

assign add_ln25_fu_340_p2 = (indvar_flatten_reg_175 + 64'd1);

assign add_ln32_fu_208_p2 = ($signed(column_read_reg_807) + $signed(32'd4294967295));

assign add_ln40_1_fu_225_p2 = (ball_size_read_reg_787 + ball_y_read_reg_801);

assign add_ln40_fu_217_p2 = (ball_size_read_reg_787 + ball_x_read_reg_795);

assign add_ln44_1_fu_233_p2 = ($signed(row_read_reg_815) + $signed(32'd4294967286));

assign add_ln44_2_fu_238_p2 = ($signed(row_read_reg_815) + $signed(32'd4294967295));

assign add_ln44_fu_229_p2 = (bar_width_read_reg_776 + bar_pos_x_read_reg_781);

assign add_ln48_fu_243_p2 = ($signed(column_read_reg_807) + $signed(32'd4294967293));

assign and_ln28_fu_673_p2 = (tmp_last_V_fu_96 & icmp_ln28_reg_890);

assign and_ln32_fu_617_p2 = (xor_ln28_fu_612_p2 & icmp_ln32_reg_899);

assign and_ln40_1_fu_314_p2 = (xor_ln40_3_fu_280_p2 & xor_ln40_2_fu_269_p2);

assign and_ln40_2_fu_507_p2 = (select_ln25_2_fu_428_p3 & and_ln40_fu_501_p2);

assign and_ln40_3_fu_712_p2 = (xor_ln32_fu_706_p2 & and_ln40_2_reg_905);

assign and_ln40_4_fu_422_p2 = (xor_ln40_5_fu_380_p2 & xor_ln40_4_fu_369_p2);

assign and_ln40_fu_501_p2 = (xor_ln40_7_fu_495_p2 & xor_ln40_6_fu_484_p2);

assign and_ln44_1_fu_320_p2 = (xor_ln44_2_fu_302_p2 & xor_ln44_1_fu_291_p2);

assign and_ln44_2_fu_541_p2 = (select_ln25_3_fu_442_p3 & and_ln44_fu_535_p2);

assign and_ln44_3_fu_660_p2 = (or_ln44_fu_654_p2 & or_ln40_fu_638_p2);

assign and_ln44_4_fu_436_p2 = (xor_ln44_4_fu_402_p2 & xor_ln44_3_fu_391_p2);

assign and_ln44_7_fu_723_p2 = (xor_ln40_1_fu_717_p2 & and_ln44_2_reg_912);

assign and_ln44_fu_535_p2 = (xor_ln44_6_fu_529_p2 & xor_ln44_5_fu_518_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln25_reg_876 == 1'd0) & (op_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((icmp_ln25_reg_876_pp0_iter1_reg == 1'd0) & (op_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6 = ((op_V_dest_V_1_state == 2'd1) | (op_V_id_V_1_state == 2'd1) | (op_V_last_V_1_state == 2'd1) | (op_V_user_V_1_state == 2'd1) | (op_V_strb_V_1_state == 2'd1) | (op_V_keep_V_1_state == 2'd1) | (op_V_data_V_1_state == 2'd1) | ((op_V_data_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_dest_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_id_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_last_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_user_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_strb_V_1_state == 2'd3) & (op_TREADY == 1'b0)) | ((op_V_keep_V_1_state == 2'd3) & (op_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_254_p0 = bound_fu_254_p00;

assign bound_fu_254_p00 = column_read_reg_807;

assign bound_fu_254_p1 = bound_fu_254_p10;

assign bound_fu_254_p10 = row_read_reg_815;

assign bound_fu_254_p2 = (bound_fu_254_p0 * bound_fu_254_p1);

assign icmp_ln25_fu_335_p2 = ((indvar_flatten_reg_175 == bound_reg_871) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_330_p2 = (($signed(zext_ln27_fu_326_p1) < $signed(column_read_reg_807)) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_468_p2 = ((or_ln28_fu_462_p2 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_474_p2 = ((zext_ln25_2_fu_450_p1 == add_ln32_reg_822) ? 1'b1 : 1'b0);

assign icmp_ln40_1_fu_275_p2 = (($signed(add_ln40_1_reg_843) < $signed(zext_ln25_1_fu_260_p1)) ? 1'b1 : 1'b0);

assign icmp_ln40_2_fu_364_p2 = (($signed(zext_ln25_fu_352_p1) < $signed(sub_ln40_1_reg_837)) ? 1'b1 : 1'b0);

assign icmp_ln40_3_fu_375_p2 = (($signed(add_ln40_1_reg_843) < $signed(zext_ln25_fu_352_p1)) ? 1'b1 : 1'b0);

assign icmp_ln40_4_fu_479_p2 = (($signed(zext_ln25_2_fu_450_p1) < $signed(sub_ln40_reg_827)) ? 1'b1 : 1'b0);

assign icmp_ln40_5_fu_490_p2 = (($signed(add_ln40_reg_832) < $signed(zext_ln25_2_fu_450_p1)) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_264_p2 = (($signed(zext_ln25_1_fu_260_p1) < $signed(sub_ln40_1_reg_837)) ? 1'b1 : 1'b0);

assign icmp_ln44_1_fu_297_p2 = (($signed(add_ln44_2_reg_860) < $signed(zext_ln25_1_fu_260_p1)) ? 1'b1 : 1'b0);

assign icmp_ln44_2_fu_386_p2 = (($signed(zext_ln25_fu_352_p1) < $signed(add_ln44_1_reg_854)) ? 1'b1 : 1'b0);

assign icmp_ln44_3_fu_397_p2 = (($signed(add_ln44_2_reg_860) < $signed(zext_ln25_fu_352_p1)) ? 1'b1 : 1'b0);

assign icmp_ln44_4_fu_513_p2 = ((zext_ln25_2_fu_450_p1 < bar_pos_x_read_reg_781) ? 1'b1 : 1'b0);

assign icmp_ln44_5_fu_524_p2 = ((add_ln44_reg_849 < zext_ln25_2_fu_450_p1) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_286_p2 = (($signed(zext_ln25_1_fu_260_p1) < $signed(add_ln44_1_reg_854)) ? 1'b1 : 1'b0);

assign icmp_ln48_1_fu_547_p2 = ((select_ln25_fu_356_p3 < 31'd3) ? 1'b1 : 1'b0);

assign icmp_ln48_2_fu_408_p2 = ((add_ln25_1_fu_346_p2 < 31'd3) ? 1'b1 : 1'b0);

assign icmp_ln48_3_fu_584_p2 = ((or_ln48_1_fu_576_p3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_4_fu_553_p2 = (($signed(zext_ln25_2_fu_450_p1) < $signed(add_ln48_reg_866)) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_308_p2 = ((ap_phi_mux_y_0_phi_fu_190_p4 < 31'd3) ? 1'b1 : 1'b0);

assign op_TDATA = op_V_data_V_1_data_out;

assign op_TDEST = op_V_dest_V_1_data_out;

assign op_TID = op_V_id_V_1_data_out;

assign op_TKEEP = op_V_keep_V_1_data_out;

assign op_TLAST = op_V_last_V_1_data_out;

assign op_TSTRB = op_V_strb_V_1_data_out;

assign op_TUSER = op_V_user_V_1_data_out;

assign op_TVALID = op_V_dest_V_1_state[1'd0];

assign op_V_data_V_1_ack_in = op_V_data_V_1_state[1'd1];

assign op_V_data_V_1_ack_out = op_TREADY;

assign op_V_data_V_1_load_A = (op_V_data_V_1_state_cmp_full & ~op_V_data_V_1_sel_wr);

assign op_V_data_V_1_load_B = (op_V_data_V_1_state_cmp_full & op_V_data_V_1_sel_wr);

assign op_V_data_V_1_sel = op_V_data_V_1_sel_rd;

assign op_V_data_V_1_state_cmp_full = ((op_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign op_V_data_V_1_vld_out = op_V_data_V_1_state[1'd0];

assign op_V_dest_V_1_ack_out = op_TREADY;

assign op_V_dest_V_1_data_out = 1'd0;

assign op_V_dest_V_1_sel = op_V_dest_V_1_sel_rd;

assign op_V_dest_V_1_vld_out = op_V_dest_V_1_state[1'd0];

assign op_V_id_V_1_ack_out = op_TREADY;

assign op_V_id_V_1_data_out = 1'd0;

assign op_V_id_V_1_sel = op_V_id_V_1_sel_rd;

assign op_V_id_V_1_vld_out = op_V_id_V_1_state[1'd0];

assign op_V_keep_V_1_ack_out = op_TREADY;

assign op_V_keep_V_1_data_out = 4'd0;

assign op_V_keep_V_1_sel = op_V_keep_V_1_sel_rd;

assign op_V_keep_V_1_vld_out = op_V_keep_V_1_state[1'd0];

assign op_V_last_V_1_ack_in = op_V_last_V_1_state[1'd1];

assign op_V_last_V_1_ack_out = op_TREADY;

assign op_V_last_V_1_load_A = (op_V_last_V_1_state_cmp_full & ~op_V_last_V_1_sel_wr);

assign op_V_last_V_1_load_B = (op_V_last_V_1_state_cmp_full & op_V_last_V_1_sel_wr);

assign op_V_last_V_1_sel = op_V_last_V_1_sel_rd;

assign op_V_last_V_1_state_cmp_full = ((op_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign op_V_last_V_1_vld_out = op_V_last_V_1_state[1'd0];

assign op_V_strb_V_1_ack_out = op_TREADY;

assign op_V_strb_V_1_data_out = 4'd0;

assign op_V_strb_V_1_sel = op_V_strb_V_1_sel_rd;

assign op_V_strb_V_1_vld_out = op_V_strb_V_1_state[1'd0];

assign op_V_user_V_1_ack_in = op_V_user_V_1_state[1'd1];

assign op_V_user_V_1_ack_out = op_TREADY;

assign op_V_user_V_1_load_A = (op_V_user_V_1_state_cmp_full & ~op_V_user_V_1_sel_wr);

assign op_V_user_V_1_load_B = (op_V_user_V_1_state_cmp_full & op_V_user_V_1_sel_wr);

assign op_V_user_V_1_sel = op_V_user_V_1_sel_rd;

assign op_V_user_V_1_state_cmp_full = ((op_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign op_V_user_V_1_vld_out = op_V_user_V_1_state[1'd0];

assign or_ln28_fu_462_p2 = (select_ln25_fu_356_p3 | select_ln25_4_fu_454_p3);

assign or_ln32_1_fu_678_p2 = (and_ln32_fu_617_p2 | and_ln28_fu_673_p2);

assign or_ln32_fu_629_p2 = (icmp_ln32_reg_899 | icmp_ln28_reg_890);

assign or_ln40_1_fu_644_p2 = (or_ln32_fu_629_p2 | and_ln40_2_reg_905);

assign or_ln40_fu_638_p2 = (xor_ln40_fu_633_p2 | or_ln32_fu_629_p2);

assign or_ln44_1_fu_728_p2 = (and_ln44_7_fu_723_p2 | and_ln40_3_fu_712_p2);

assign or_ln44_fu_654_p2 = (xor_ln44_fu_649_p2 | or_ln40_1_fu_644_p2);

assign or_ln48_1_fu_576_p3 = {{31'd0}, {or_ln48_2_fu_570_p2}};

assign or_ln48_2_fu_570_p2 = (or_ln48_fu_564_p2 | icmp_ln48_1_fu_547_p2);

assign or_ln48_fu_564_p2 = (xor_ln48_fu_558_p2 | select_ln25_1_fu_414_p3);

assign select_ln25_1_fu_414_p3 = ((icmp_ln27_fu_330_p2[0:0] === 1'b1) ? icmp_ln48_fu_308_p2 : icmp_ln48_2_fu_408_p2);

assign select_ln25_2_fu_428_p3 = ((icmp_ln27_fu_330_p2[0:0] === 1'b1) ? and_ln40_1_fu_314_p2 : and_ln40_4_fu_422_p2);

assign select_ln25_3_fu_442_p3 = ((icmp_ln27_fu_330_p2[0:0] === 1'b1) ? and_ln44_1_fu_320_p2 : and_ln44_4_fu_436_p2);

assign select_ln25_4_fu_454_p3 = ((icmp_ln27_fu_330_p2[0:0] === 1'b1) ? ap_phi_mux_y_0_phi_fu_190_p4 : add_ln25_1_fu_346_p2);

assign select_ln25_fu_356_p3 = ((icmp_ln27_fu_330_p2[0:0] === 1'b1) ? x_0_reg_197 : 31'd0);

assign select_ln28_fu_691_p3 = ((icmp_ln28_reg_890[0:0] === 1'b1) ? tmp_data_V_fu_92 : select_ln48_fu_605_p3);

assign select_ln32_1_fu_698_p3 = ((and_ln32_fu_617_p2[0:0] === 1'b1) ? tmp_data_V_fu_92 : select_ln28_fu_691_p3);

assign select_ln32_fu_622_p3 = ((and_ln32_fu_617_p2[0:0] === 1'b1) ? tmp_user_V_fu_100 : icmp_ln28_reg_890);

assign select_ln48_fu_605_p3 = ((icmp_ln48_3_reg_918[0:0] === 1'b1) ? 32'd0 : 32'd2130706687);

assign sub_ln40_1_fu_221_p2 = (ball_y_read_reg_801 - ball_size_read_reg_787);

assign sub_ln40_fu_213_p2 = (ball_x_read_reg_795 - ball_size_read_reg_787);

assign tmp_data_V_1_fu_734_p3 = ((or_ln44_1_fu_728_p2[0:0] === 1'b1) ? 32'd2130706687 : select_ln32_1_fu_698_p3);

assign tmp_last_V_1_fu_684_p2 = (or_ln32_1_fu_678_p2 & and_ln44_3_fu_660_p2);

assign tmp_user_V_1_fu_666_p2 = (select_ln32_fu_622_p3 & and_ln44_3_fu_660_p2);

assign x_fu_590_p2 = (select_ln25_fu_356_p3 + 31'd1);

assign xor_ln28_fu_612_p2 = (icmp_ln28_reg_890 ^ 1'd1);

assign xor_ln32_fu_706_p2 = (or_ln32_fu_629_p2 ^ 1'd1);

assign xor_ln40_1_fu_717_p2 = (or_ln40_1_fu_644_p2 ^ 1'd1);

assign xor_ln40_2_fu_269_p2 = (icmp_ln40_fu_264_p2 ^ 1'd1);

assign xor_ln40_3_fu_280_p2 = (icmp_ln40_1_fu_275_p2 ^ 1'd1);

assign xor_ln40_4_fu_369_p2 = (icmp_ln40_2_fu_364_p2 ^ 1'd1);

assign xor_ln40_5_fu_380_p2 = (icmp_ln40_3_fu_375_p2 ^ 1'd1);

assign xor_ln40_6_fu_484_p2 = (icmp_ln40_4_fu_479_p2 ^ 1'd1);

assign xor_ln40_7_fu_495_p2 = (icmp_ln40_5_fu_490_p2 ^ 1'd1);

assign xor_ln40_fu_633_p2 = (1'd1 ^ and_ln40_2_reg_905);

assign xor_ln44_1_fu_291_p2 = (icmp_ln44_fu_286_p2 ^ 1'd1);

assign xor_ln44_2_fu_302_p2 = (icmp_ln44_1_fu_297_p2 ^ 1'd1);

assign xor_ln44_3_fu_391_p2 = (icmp_ln44_2_fu_386_p2 ^ 1'd1);

assign xor_ln44_4_fu_402_p2 = (icmp_ln44_3_fu_397_p2 ^ 1'd1);

assign xor_ln44_5_fu_518_p2 = (icmp_ln44_4_fu_513_p2 ^ 1'd1);

assign xor_ln44_6_fu_529_p2 = (icmp_ln44_5_fu_524_p2 ^ 1'd1);

assign xor_ln44_fu_649_p2 = (1'd1 ^ and_ln44_2_reg_912);

assign xor_ln48_fu_558_p2 = (icmp_ln48_4_fu_553_p2 ^ 1'd1);

assign zext_ln25_1_fu_260_p1 = ap_phi_mux_y_0_phi_fu_190_p4;

assign zext_ln25_2_fu_450_p1 = select_ln25_fu_356_p3;

assign zext_ln25_fu_352_p1 = add_ln25_1_fu_346_p2;

assign zext_ln27_fu_326_p1 = x_0_reg_197;

endmodule //hud_gen
